/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Rental generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`rental`", uniqueConstraints = {
            @UniqueConstraint(name = "`rental_date`", columnNames = {"`rental_date`", "`inventory_id`", "`customer_id`"})})
public class Rental implements Serializable {

    private Integer rentalId;
    private LocalDateTime rentalDate;
    private int inventoryId;
    private short customerId;
    private LocalDateTime returnDate;
    private short staffId;
    private Timestamp lastUpdate;
    private Customer customer;
    private Inventory inventory;
    private Staff staff;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`rental_id`", nullable = false, scale = 0, precision = 10)
    public Integer getRentalId() {
        return this.rentalId;
    }

    public void setRentalId(Integer rentalId) {
        this.rentalId = rentalId;
    }

    @Column(name = "`rental_date`", nullable = false)
    public LocalDateTime getRentalDate() {
        return this.rentalDate;
    }

    public void setRentalDate(LocalDateTime rentalDate) {
        this.rentalDate = rentalDate;
    }

    @Column(name = "`inventory_id`", nullable = false, scale = 0, precision = 7)
    public int getInventoryId() {
        return this.inventoryId;
    }

    public void setInventoryId(int inventoryId) {
        this.inventoryId = inventoryId;
    }

    @Column(name = "`customer_id`", nullable = false, scale = 0, precision = 5)
    public short getCustomerId() {
        return this.customerId;
    }

    public void setCustomerId(short customerId) {
        this.customerId = customerId;
    }

    @Column(name = "`return_date`", nullable = true)
    public LocalDateTime getReturnDate() {
        return this.returnDate;
    }

    public void setReturnDate(LocalDateTime returnDate) {
        this.returnDate = returnDate;
    }

    @Column(name = "`staff_id`", nullable = false, scale = 0, precision = 3)
    public short getStaffId() {
        return this.staffId;
    }

    public void setStaffId(short staffId) {
        this.staffId = staffId;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`customer_id`", referencedColumnName = "`customer_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_rental_customer`"))
    @Fetch(FetchMode.JOIN)
    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        if(customer != null) {
            this.customerId = customer.getCustomerId();
        }

        this.customer = customer;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`inventory_id`", referencedColumnName = "`inventory_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_rental_inventory`"))
    @Fetch(FetchMode.JOIN)
    public Inventory getInventory() {
        return this.inventory;
    }

    public void setInventory(Inventory inventory) {
        if(inventory != null) {
            this.inventoryId = inventory.getInventoryId();
        }

        this.inventory = inventory;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`staff_id`", referencedColumnName = "`staff_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_rental_staff`"))
    @Fetch(FetchMode.JOIN)
    public Staff getStaff() {
        return this.staff;
    }

    public void setStaff(Staff staff) {
        if(staff != null) {
            this.staffId = staff.getStaffId();
        }

        this.staff = staff;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Rental)) return false;
        final Rental rental = (Rental) o;
        return Objects.equals(getRentalId(), rental.getRentalId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getRentalId());
    }
}