/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Category;
import com.externalrepoproject.actordb.FilmCategory;


/**
 * ServiceImpl object for domain model class Category.
 *
 * @see Category
 */
@Service("actordb.CategoryService")
@Validated
public class CategoryServiceImpl implements CategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.FilmCategoryService")
    private FilmCategoryService filmCategoryService;

    @Autowired
    @Qualifier("actordb.CategoryDao")
    private WMGenericDao<Category, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Category, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Category create(Category category) {
        LOGGER.debug("Creating a new Category with information: {}", category);

        Category categoryCreated = this.wmGenericDao.create(category);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(categoryCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Category getById(Short categoryIdInstance) {
        LOGGER.debug("Finding Category by id: {}", categoryIdInstance);
        return this.wmGenericDao.findById(categoryIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Category findById(Short categoryIdInstance) {
        LOGGER.debug("Finding Category by id: {}", categoryIdInstance);
        try {
            return this.wmGenericDao.findById(categoryIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Category found with id: {}", categoryIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Category> findByMultipleIds(List<Short> categoryIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Categories by ids: {}", categoryIdInstances);

        return this.wmGenericDao.findByMultipleIds(categoryIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Category update(Category category) {
        LOGGER.debug("Updating Category with information: {}", category);

        this.wmGenericDao.update(category);
        this.wmGenericDao.refresh(category);

        return category;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Category delete(Short categoryIdInstance) {
        LOGGER.debug("Deleting Category with id: {}", categoryIdInstance);
        Category deleted = this.wmGenericDao.findById(categoryIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Category found with id: {}", categoryIdInstance);
            throw new EntityNotFoundException(String.valueOf(categoryIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Category category) {
        LOGGER.debug("Deleting Category with {}", category);
        this.wmGenericDao.delete(category);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Category> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Category> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Categories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Category to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Category to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<FilmCategory> findAssociatedFilmCategories(Short categoryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated filmCategories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("category.categoryId = '" + categoryId + "'");

        return filmCategoryService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FilmCategoryService instance
     */
    protected void setFilmCategoryService(FilmCategoryService service) {
        this.filmCategoryService = service;
    }

}