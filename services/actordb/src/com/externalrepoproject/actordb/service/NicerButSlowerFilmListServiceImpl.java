/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.NicerButSlowerFilmList;
import com.externalrepoproject.actordb.NicerButSlowerFilmListId;


/**
 * ServiceImpl object for domain model class NicerButSlowerFilmList.
 *
 * @see NicerButSlowerFilmList
 */
@Service("actordb.NicerButSlowerFilmListService")
@Validated
public class NicerButSlowerFilmListServiceImpl implements NicerButSlowerFilmListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NicerButSlowerFilmListServiceImpl.class);


    @Autowired
    @Qualifier("actordb.NicerButSlowerFilmListDao")
    private WMGenericDao<NicerButSlowerFilmList, NicerButSlowerFilmListId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NicerButSlowerFilmList, NicerButSlowerFilmListId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public NicerButSlowerFilmList create(NicerButSlowerFilmList nicerButSlowerFilmList) {
        LOGGER.debug("Creating a new NicerButSlowerFilmList with information: {}", nicerButSlowerFilmList);

        NicerButSlowerFilmList nicerButSlowerFilmListCreated = this.wmGenericDao.create(nicerButSlowerFilmList);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(nicerButSlowerFilmListCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public NicerButSlowerFilmList getById(NicerButSlowerFilmListId nicerbutslowerfilmlistId) {
        LOGGER.debug("Finding NicerButSlowerFilmList by id: {}", nicerbutslowerfilmlistId);
        return this.wmGenericDao.findById(nicerbutslowerfilmlistId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public NicerButSlowerFilmList findById(NicerButSlowerFilmListId nicerbutslowerfilmlistId) {
        LOGGER.debug("Finding NicerButSlowerFilmList by id: {}", nicerbutslowerfilmlistId);
        try {
            return this.wmGenericDao.findById(nicerbutslowerfilmlistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No NicerButSlowerFilmList found with id: {}", nicerbutslowerfilmlistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<NicerButSlowerFilmList> findByMultipleIds(List<NicerButSlowerFilmListId> nicerbutslowerfilmlistIds, boolean orderedReturn) {
        LOGGER.debug("Finding NicerButSlowerFilmLists by ids: {}", nicerbutslowerfilmlistIds);

        return this.wmGenericDao.findByMultipleIds(nicerbutslowerfilmlistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public NicerButSlowerFilmList update(NicerButSlowerFilmList nicerButSlowerFilmList) {
        LOGGER.debug("Updating NicerButSlowerFilmList with information: {}", nicerButSlowerFilmList);

        this.wmGenericDao.update(nicerButSlowerFilmList);
        this.wmGenericDao.refresh(nicerButSlowerFilmList);

        return nicerButSlowerFilmList;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public NicerButSlowerFilmList delete(NicerButSlowerFilmListId nicerbutslowerfilmlistId) {
        LOGGER.debug("Deleting NicerButSlowerFilmList with id: {}", nicerbutslowerfilmlistId);
        NicerButSlowerFilmList deleted = this.wmGenericDao.findById(nicerbutslowerfilmlistId);
        if (deleted == null) {
            LOGGER.debug("No NicerButSlowerFilmList found with id: {}", nicerbutslowerfilmlistId);
            throw new EntityNotFoundException(String.valueOf(nicerbutslowerfilmlistId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(NicerButSlowerFilmList nicerButSlowerFilmList) {
        LOGGER.debug("Deleting NicerButSlowerFilmList with {}", nicerButSlowerFilmList);
        this.wmGenericDao.delete(nicerButSlowerFilmList);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<NicerButSlowerFilmList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NicerButSlowerFilmLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<NicerButSlowerFilmList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NicerButSlowerFilmLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table NicerButSlowerFilmList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table NicerButSlowerFilmList to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}