/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.City;
import com.externalrepoproject.actordb.Country;


/**
 * ServiceImpl object for domain model class Country.
 *
 * @see Country
 */
@Service("actordb.CountryService")
@Validated
public class CountryServiceImpl implements CountryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.CityService")
    private CityService cityService;

    @Autowired
    @Qualifier("actordb.CountryDao")
    private WMGenericDao<Country, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Country, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Country create(Country countryInstance) {
        LOGGER.debug("Creating a new Country with information: {}", countryInstance);

        Country countryInstanceCreated = this.wmGenericDao.create(countryInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(countryInstanceCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Country getById(Short countryIdInstance) {
        LOGGER.debug("Finding Country by id: {}", countryIdInstance);
        return this.wmGenericDao.findById(countryIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Country findById(Short countryIdInstance) {
        LOGGER.debug("Finding Country by id: {}", countryIdInstance);
        try {
            return this.wmGenericDao.findById(countryIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Country found with id: {}", countryIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Country> findByMultipleIds(List<Short> countryIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Countries by ids: {}", countryIdInstances);

        return this.wmGenericDao.findByMultipleIds(countryIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Country update(Country countryInstance) {
        LOGGER.debug("Updating Country with information: {}", countryInstance);

        this.wmGenericDao.update(countryInstance);
        this.wmGenericDao.refresh(countryInstance);

        return countryInstance;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Country delete(Short countryIdInstance) {
        LOGGER.debug("Deleting Country with id: {}", countryIdInstance);
        Country deleted = this.wmGenericDao.findById(countryIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Country found with id: {}", countryIdInstance);
            throw new EntityNotFoundException(String.valueOf(countryIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Country countryInstance) {
        LOGGER.debug("Deleting Country with {}", countryInstance);
        this.wmGenericDao.delete(countryInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Country> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Country> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Country to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Country to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<City> findAssociatedCities(Short countryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated cities");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("country.countryId = '" + countryId + "'");

        return cityService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CityService instance
     */
    protected void setCityService(CityService service) {
        this.cityService = service;
    }

}