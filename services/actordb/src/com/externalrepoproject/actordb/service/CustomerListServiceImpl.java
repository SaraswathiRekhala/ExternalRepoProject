/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.CustomerList;
import com.externalrepoproject.actordb.CustomerListId;


/**
 * ServiceImpl object for domain model class CustomerList.
 *
 * @see CustomerList
 */
@Service("actordb.CustomerListService")
@Validated
public class CustomerListServiceImpl implements CustomerListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerListServiceImpl.class);


    @Autowired
    @Qualifier("actordb.CustomerListDao")
    private WMGenericDao<CustomerList, CustomerListId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CustomerList, CustomerListId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public CustomerList create(CustomerList customerList) {
        LOGGER.debug("Creating a new CustomerList with information: {}", customerList);

        CustomerList customerListCreated = this.wmGenericDao.create(customerList);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(customerListCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public CustomerList getById(CustomerListId customerlistId) {
        LOGGER.debug("Finding CustomerList by id: {}", customerlistId);
        return this.wmGenericDao.findById(customerlistId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public CustomerList findById(CustomerListId customerlistId) {
        LOGGER.debug("Finding CustomerList by id: {}", customerlistId);
        try {
            return this.wmGenericDao.findById(customerlistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CustomerList found with id: {}", customerlistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<CustomerList> findByMultipleIds(List<CustomerListId> customerlistIds, boolean orderedReturn) {
        LOGGER.debug("Finding CustomerLists by ids: {}", customerlistIds);

        return this.wmGenericDao.findByMultipleIds(customerlistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public CustomerList update(CustomerList customerList) {
        LOGGER.debug("Updating CustomerList with information: {}", customerList);

        this.wmGenericDao.update(customerList);
        this.wmGenericDao.refresh(customerList);

        return customerList;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public CustomerList delete(CustomerListId customerlistId) {
        LOGGER.debug("Deleting CustomerList with id: {}", customerlistId);
        CustomerList deleted = this.wmGenericDao.findById(customerlistId);
        if (deleted == null) {
            LOGGER.debug("No CustomerList found with id: {}", customerlistId);
            throw new EntityNotFoundException(String.valueOf(customerlistId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(CustomerList customerList) {
        LOGGER.debug("Deleting CustomerList with {}", customerList);
        this.wmGenericDao.delete(customerList);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<CustomerList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CustomerLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<CustomerList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CustomerLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table CustomerList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table CustomerList to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}