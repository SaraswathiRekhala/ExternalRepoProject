/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Payment;
import com.externalrepoproject.actordb.Rental;


/**
 * ServiceImpl object for domain model class Rental.
 *
 * @see Rental
 */
@Service("actordb.RentalService")
@Validated
public class RentalServiceImpl implements RentalService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RentalServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.PaymentService")
    private PaymentService paymentService;

    @Autowired
    @Qualifier("actordb.RentalDao")
    private WMGenericDao<Rental, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Rental, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Rental create(Rental rental) {
        LOGGER.debug("Creating a new Rental with information: {}", rental);

        Rental rentalCreated = this.wmGenericDao.create(rental);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rentalCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Rental getById(Integer rentalIdInstance) {
        LOGGER.debug("Finding Rental by id: {}", rentalIdInstance);
        return this.wmGenericDao.findById(rentalIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Rental findById(Integer rentalIdInstance) {
        LOGGER.debug("Finding Rental by id: {}", rentalIdInstance);
        try {
            return this.wmGenericDao.findById(rentalIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Rental found with id: {}", rentalIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Rental> findByMultipleIds(List<Integer> rentalIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Rentals by ids: {}", rentalIdInstances);

        return this.wmGenericDao.findByMultipleIds(rentalIdInstances, orderedReturn);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Rental getByRentalDateAndInventoryIdAndCustomerId(LocalDateTime rentalDate, int inventoryId, short customerId) {
        Map<String, Object> rentalDateAndInventoryIdAndCustomerIdMap = new HashMap<>();
        rentalDateAndInventoryIdAndCustomerIdMap.put("rentalDate", rentalDate);
        rentalDateAndInventoryIdAndCustomerIdMap.put("inventoryId", inventoryId);
        rentalDateAndInventoryIdAndCustomerIdMap.put("customerId", customerId);

        LOGGER.debug("Finding Rental by unique keys: {}", rentalDateAndInventoryIdAndCustomerIdMap);
        return this.wmGenericDao.findByUniqueKey(rentalDateAndInventoryIdAndCustomerIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Rental update(Rental rental) {
        LOGGER.debug("Updating Rental with information: {}", rental);

        this.wmGenericDao.update(rental);
        this.wmGenericDao.refresh(rental);

        return rental;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Rental delete(Integer rentalIdInstance) {
        LOGGER.debug("Deleting Rental with id: {}", rentalIdInstance);
        Rental deleted = this.wmGenericDao.findById(rentalIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Rental found with id: {}", rentalIdInstance);
            throw new EntityNotFoundException(String.valueOf(rentalIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Rental rental) {
        LOGGER.debug("Deleting Rental with {}", rental);
        this.wmGenericDao.delete(rental);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Rental> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Rentals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Rental> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Rentals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Rental to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Rental to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Payment> findAssociatedPayments(Integer rentalId, Pageable pageable) {
        LOGGER.debug("Fetching all associated payments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("rental.rentalId = '" + rentalId + "'");

        return paymentService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PaymentService instance
     */
    protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

}