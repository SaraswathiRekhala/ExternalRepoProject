/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.FilmActor;
import com.externalrepoproject.actordb.FilmActorId;

/**
 * Service object for domain model class {@link FilmActor}.
 */
public interface FilmActorService {

    /**
     * Creates a new FilmActor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FilmActor if any.
     *
     * @param filmActor Details of the FilmActor to be created; value cannot be null.
     * @return The newly created FilmActor.
     */
    FilmActor create(@Valid FilmActor filmActor);


	/**
     * Returns FilmActor by given id if exists.
     *
     * @param filmactorId The id of the FilmActor to get; value cannot be null.
     * @return FilmActor associated with the given filmactorId.
	 * @throws EntityNotFoundException If no FilmActor is found.
     */
    FilmActor getById(FilmActorId filmactorId);

    /**
     * Find and return the FilmActor by given id if exists, returns null otherwise.
     *
     * @param filmactorId The id of the FilmActor to get; value cannot be null.
     * @return FilmActor associated with the given filmactorId.
     */
    FilmActor findById(FilmActorId filmactorId);

	/**
     * Find and return the list of FilmActors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param filmactorIds The id's of the FilmActor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return FilmActors associated with the given filmactorIds.
     */
    List<FilmActor> findByMultipleIds(List<FilmActorId> filmactorIds, boolean orderedReturn);


    /**
     * Updates the details of an existing FilmActor. It replaces all fields of the existing FilmActor with the given filmActor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FilmActor if any.
     *
     * @param filmActor The details of the FilmActor to be updated; value cannot be null.
     * @return The updated FilmActor.
     * @throws EntityNotFoundException if no FilmActor is found with given input.
     */
    FilmActor update(@Valid FilmActor filmActor);

    /**
     * Deletes an existing FilmActor with the given id.
     *
     * @param filmactorId The id of the FilmActor to be deleted; value cannot be null.
     * @return The deleted FilmActor.
     * @throws EntityNotFoundException if no FilmActor found with the given id.
     */
    FilmActor delete(FilmActorId filmactorId);

    /**
     * Deletes an existing FilmActor with the given object.
     *
     * @param filmActor The instance of the FilmActor to be deleted; value cannot be null.
     */
    void delete(FilmActor filmActor);

    /**
     * Find all FilmActors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FilmActors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<FilmActor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all FilmActors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FilmActors.
     *
     * @see Pageable
     * @see Page
     */
    Page<FilmActor> findAll(String query, Pageable pageable);

    /**
     * Exports all FilmActors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all FilmActors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the FilmActors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the FilmActor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}