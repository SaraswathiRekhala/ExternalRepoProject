/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Customer;
import com.externalrepoproject.actordb.Inventory;
import com.externalrepoproject.actordb.Staff;
import com.externalrepoproject.actordb.Store;


/**
 * ServiceImpl object for domain model class Store.
 *
 * @see Store
 */
@Service("actordb.StoreService")
@Validated
public class StoreServiceImpl implements StoreService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StoreServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.StaffService")
    private StaffService staffService;

    @Lazy
    @Autowired
    @Qualifier("actordb.InventoryService")
    private InventoryService inventoryService;

    @Lazy
    @Autowired
    @Qualifier("actordb.CustomerService")
    private CustomerService customerService;

    @Autowired
    @Qualifier("actordb.StoreDao")
    private WMGenericDao<Store, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Store, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Store create(Store store) {
        LOGGER.debug("Creating a new Store with information: {}", store);

        Store storeCreated = this.wmGenericDao.create(store);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(storeCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Store getById(Short storeIdInstance) {
        LOGGER.debug("Finding Store by id: {}", storeIdInstance);
        return this.wmGenericDao.findById(storeIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Store findById(Short storeIdInstance) {
        LOGGER.debug("Finding Store by id: {}", storeIdInstance);
        try {
            return this.wmGenericDao.findById(storeIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Store found with id: {}", storeIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Store> findByMultipleIds(List<Short> storeIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Stores by ids: {}", storeIdInstances);

        return this.wmGenericDao.findByMultipleIds(storeIdInstances, orderedReturn);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Store getByManagerStaffId(short managerStaffId) {
        Map<String, Object> managerStaffIdMap = new HashMap<>();
        managerStaffIdMap.put("managerStaffId", managerStaffId);

        LOGGER.debug("Finding Store by unique keys: {}", managerStaffIdMap);
        return this.wmGenericDao.findByUniqueKey(managerStaffIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Store update(Store store) {
        LOGGER.debug("Updating Store with information: {}", store);

        this.wmGenericDao.update(store);
        this.wmGenericDao.refresh(store);

        return store;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Store delete(Short storeIdInstance) {
        LOGGER.debug("Deleting Store with id: {}", storeIdInstance);
        Store deleted = this.wmGenericDao.findById(storeIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Store found with id: {}", storeIdInstance);
            throw new EntityNotFoundException(String.valueOf(storeIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Store store) {
        LOGGER.debug("Deleting Store with {}", store);
        this.wmGenericDao.delete(store);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Store> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Stores");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Store> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Stores");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Store to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Store to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Customer> findAssociatedCustomers(Short storeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated customers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("store.storeId = '" + storeId + "'");

        return customerService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Inventory> findAssociatedInventories(Short storeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated inventories");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("store.storeId = '" + storeId + "'");

        return inventoryService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Staff> findAssociatedStaffsForStoreId(Short storeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated staffsForStoreId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("storeByStoreId.storeId = '" + storeId + "'");

        return staffService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service StaffService instance
     */
    protected void setStaffService(StaffService service) {
        this.staffService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service InventoryService instance
     */
    protected void setInventoryService(InventoryService service) {
        this.inventoryService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CustomerService instance
     */
    protected void setCustomerService(CustomerService service) {
        this.customerService = service;
    }

}