/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Film;
import com.externalrepoproject.actordb.Language;

/**
 * Service object for domain model class {@link Language}.
 */
public interface LanguageService {

    /**
     * Creates a new Language. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Language if any.
     *
     * @param language Details of the Language to be created; value cannot be null.
     * @return The newly created Language.
     */
    Language create(@Valid Language language);


	/**
     * Returns Language by given id if exists.
     *
     * @param languageIdInstance The id of the Language to get; value cannot be null.
     * @return Language associated with the given languageIdInstance.
	 * @throws EntityNotFoundException If no Language is found.
     */
    Language getById(Short languageIdInstance);

    /**
     * Find and return the Language by given id if exists, returns null otherwise.
     *
     * @param languageIdInstance The id of the Language to get; value cannot be null.
     * @return Language associated with the given languageIdInstance.
     */
    Language findById(Short languageIdInstance);

	/**
     * Find and return the list of Languages by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param languageIdInstances The id's of the Language to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Languages associated with the given languageIdInstances.
     */
    List<Language> findByMultipleIds(List<Short> languageIdInstances, boolean orderedReturn);


    /**
     * Updates the details of an existing Language. It replaces all fields of the existing Language with the given language.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Language if any.
     *
     * @param language The details of the Language to be updated; value cannot be null.
     * @return The updated Language.
     * @throws EntityNotFoundException if no Language is found with given input.
     */
    Language update(@Valid Language language);

    /**
     * Deletes an existing Language with the given id.
     *
     * @param languageIdInstance The id of the Language to be deleted; value cannot be null.
     * @return The deleted Language.
     * @throws EntityNotFoundException if no Language found with the given id.
     */
    Language delete(Short languageIdInstance);

    /**
     * Deletes an existing Language with the given object.
     *
     * @param language The instance of the Language to be deleted; value cannot be null.
     */
    void delete(Language language);

    /**
     * Find all Languages matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Languages.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Language> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Languages matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Languages.
     *
     * @see Pageable
     * @see Page
     */
    Page<Language> findAll(String query, Pageable pageable);

    /**
     * Exports all Languages matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Languages matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Languages in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Language.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated filmsForOriginalLanguageId for given Language id.
     *
     * @param languageId value of languageId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Film instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Film> findAssociatedFilmsForOriginalLanguageId(Short languageId, Pageable pageable);

    /*
     * Returns the associated filmsForLanguageId for given Language id.
     *
     * @param languageId value of languageId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Film instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Film> findAssociatedFilmsForLanguageId(Short languageId, Pageable pageable);

}