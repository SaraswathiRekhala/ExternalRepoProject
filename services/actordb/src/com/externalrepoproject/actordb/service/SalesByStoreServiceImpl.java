/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.SalesByStore;
import com.externalrepoproject.actordb.SalesByStoreId;


/**
 * ServiceImpl object for domain model class SalesByStore.
 *
 * @see SalesByStore
 */
@Service("actordb.SalesByStoreService")
@Validated
public class SalesByStoreServiceImpl implements SalesByStoreService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesByStoreServiceImpl.class);


    @Autowired
    @Qualifier("actordb.SalesByStoreDao")
    private WMGenericDao<SalesByStore, SalesByStoreId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SalesByStore, SalesByStoreId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public SalesByStore create(SalesByStore salesByStore) {
        LOGGER.debug("Creating a new SalesByStore with information: {}", salesByStore);

        SalesByStore salesByStoreCreated = this.wmGenericDao.create(salesByStore);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(salesByStoreCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public SalesByStore getById(SalesByStoreId salesbystoreId) {
        LOGGER.debug("Finding SalesByStore by id: {}", salesbystoreId);
        return this.wmGenericDao.findById(salesbystoreId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public SalesByStore findById(SalesByStoreId salesbystoreId) {
        LOGGER.debug("Finding SalesByStore by id: {}", salesbystoreId);
        try {
            return this.wmGenericDao.findById(salesbystoreId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SalesByStore found with id: {}", salesbystoreId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<SalesByStore> findByMultipleIds(List<SalesByStoreId> salesbystoreIds, boolean orderedReturn) {
        LOGGER.debug("Finding SalesByStores by ids: {}", salesbystoreIds);

        return this.wmGenericDao.findByMultipleIds(salesbystoreIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public SalesByStore update(SalesByStore salesByStore) {
        LOGGER.debug("Updating SalesByStore with information: {}", salesByStore);

        this.wmGenericDao.update(salesByStore);
        this.wmGenericDao.refresh(salesByStore);

        return salesByStore;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public SalesByStore delete(SalesByStoreId salesbystoreId) {
        LOGGER.debug("Deleting SalesByStore with id: {}", salesbystoreId);
        SalesByStore deleted = this.wmGenericDao.findById(salesbystoreId);
        if (deleted == null) {
            LOGGER.debug("No SalesByStore found with id: {}", salesbystoreId);
            throw new EntityNotFoundException(String.valueOf(salesbystoreId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(SalesByStore salesByStore) {
        LOGGER.debug("Deleting SalesByStore with {}", salesByStore);
        this.wmGenericDao.delete(salesByStore);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<SalesByStore> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SalesByStores");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<SalesByStore> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SalesByStores");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table SalesByStore to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table SalesByStore to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}