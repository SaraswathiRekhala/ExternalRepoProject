/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.ActorInfo;
import com.externalrepoproject.actordb.ActorInfoId;


/**
 * ServiceImpl object for domain model class ActorInfo.
 *
 * @see ActorInfo
 */
@Service("actordb.ActorInfoService")
@Validated
public class ActorInfoServiceImpl implements ActorInfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActorInfoServiceImpl.class);


    @Autowired
    @Qualifier("actordb.ActorInfoDao")
    private WMGenericDao<ActorInfo, ActorInfoId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ActorInfo, ActorInfoId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public ActorInfo create(ActorInfo actorInfo) {
        LOGGER.debug("Creating a new ActorInfo with information: {}", actorInfo);

        ActorInfo actorInfoCreated = this.wmGenericDao.create(actorInfo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(actorInfoCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public ActorInfo getById(ActorInfoId actorinfoId) {
        LOGGER.debug("Finding ActorInfo by id: {}", actorinfoId);
        return this.wmGenericDao.findById(actorinfoId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public ActorInfo findById(ActorInfoId actorinfoId) {
        LOGGER.debug("Finding ActorInfo by id: {}", actorinfoId);
        try {
            return this.wmGenericDao.findById(actorinfoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActorInfo found with id: {}", actorinfoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<ActorInfo> findByMultipleIds(List<ActorInfoId> actorinfoIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActorInfos by ids: {}", actorinfoIds);

        return this.wmGenericDao.findByMultipleIds(actorinfoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public ActorInfo update(ActorInfo actorInfo) {
        LOGGER.debug("Updating ActorInfo with information: {}", actorInfo);

        this.wmGenericDao.update(actorInfo);
        this.wmGenericDao.refresh(actorInfo);

        return actorInfo;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public ActorInfo delete(ActorInfoId actorinfoId) {
        LOGGER.debug("Deleting ActorInfo with id: {}", actorinfoId);
        ActorInfo deleted = this.wmGenericDao.findById(actorinfoId);
        if (deleted == null) {
            LOGGER.debug("No ActorInfo found with id: {}", actorinfoId);
            throw new EntityNotFoundException(String.valueOf(actorinfoId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(ActorInfo actorInfo) {
        LOGGER.debug("Deleting ActorInfo with {}", actorInfo);
        this.wmGenericDao.delete(actorInfo);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<ActorInfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActorInfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<ActorInfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActorInfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table ActorInfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table ActorInfo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}