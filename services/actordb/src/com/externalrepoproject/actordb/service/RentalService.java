/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Payment;
import com.externalrepoproject.actordb.Rental;

/**
 * Service object for domain model class {@link Rental}.
 */
public interface RentalService {

    /**
     * Creates a new Rental. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Rental if any.
     *
     * @param rental Details of the Rental to be created; value cannot be null.
     * @return The newly created Rental.
     */
    Rental create(@Valid Rental rental);


	/**
     * Returns Rental by given id if exists.
     *
     * @param rentalIdInstance The id of the Rental to get; value cannot be null.
     * @return Rental associated with the given rentalIdInstance.
	 * @throws EntityNotFoundException If no Rental is found.
     */
    Rental getById(Integer rentalIdInstance);

    /**
     * Find and return the Rental by given id if exists, returns null otherwise.
     *
     * @param rentalIdInstance The id of the Rental to get; value cannot be null.
     * @return Rental associated with the given rentalIdInstance.
     */
    Rental findById(Integer rentalIdInstance);

	/**
     * Find and return the list of Rentals by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param rentalIdInstances The id's of the Rental to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Rentals associated with the given rentalIdInstances.
     */
    List<Rental> findByMultipleIds(List<Integer> rentalIdInstances, boolean orderedReturn);

    /**
     * Find and return the Rental for given rentalDate  andinventoryId  andcustomerId  if exists.
     *
     * @param rentalDate value of rentalDate; value cannot be null.
     * @param inventoryId value of inventoryId; value cannot be null.
     * @param customerId value of customerId; value cannot be null.
     * @return Rental associated with the given inputs.
     * @throws EntityNotFoundException if no matching Rental found.
     */
    Rental getByRentalDateAndInventoryIdAndCustomerId(LocalDateTime rentalDate, int inventoryId, short customerId);

    /**
     * Updates the details of an existing Rental. It replaces all fields of the existing Rental with the given rental.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Rental if any.
     *
     * @param rental The details of the Rental to be updated; value cannot be null.
     * @return The updated Rental.
     * @throws EntityNotFoundException if no Rental is found with given input.
     */
    Rental update(@Valid Rental rental);

    /**
     * Deletes an existing Rental with the given id.
     *
     * @param rentalIdInstance The id of the Rental to be deleted; value cannot be null.
     * @return The deleted Rental.
     * @throws EntityNotFoundException if no Rental found with the given id.
     */
    Rental delete(Integer rentalIdInstance);

    /**
     * Deletes an existing Rental with the given object.
     *
     * @param rental The instance of the Rental to be deleted; value cannot be null.
     */
    void delete(Rental rental);

    /**
     * Find all Rentals matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Rentals.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Rental> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Rentals matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Rentals.
     *
     * @see Pageable
     * @see Page
     */
    Page<Rental> findAll(String query, Pageable pageable);

    /**
     * Exports all Rentals matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Rentals matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Rentals in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Rental.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated payments for given Rental id.
     *
     * @param rentalId value of rentalId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Payment instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Payment> findAssociatedPayments(Integer rentalId, Pageable pageable);

}