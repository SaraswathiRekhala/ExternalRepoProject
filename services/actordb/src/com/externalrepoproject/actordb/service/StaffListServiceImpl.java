/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.StaffList;
import com.externalrepoproject.actordb.StaffListId;


/**
 * ServiceImpl object for domain model class StaffList.
 *
 * @see StaffList
 */
@Service("actordb.StaffListService")
@Validated
public class StaffListServiceImpl implements StaffListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffListServiceImpl.class);


    @Autowired
    @Qualifier("actordb.StaffListDao")
    private WMGenericDao<StaffList, StaffListId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StaffList, StaffListId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public StaffList create(StaffList staffList) {
        LOGGER.debug("Creating a new StaffList with information: {}", staffList);

        StaffList staffListCreated = this.wmGenericDao.create(staffList);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(staffListCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public StaffList getById(StaffListId stafflistId) {
        LOGGER.debug("Finding StaffList by id: {}", stafflistId);
        return this.wmGenericDao.findById(stafflistId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public StaffList findById(StaffListId stafflistId) {
        LOGGER.debug("Finding StaffList by id: {}", stafflistId);
        try {
            return this.wmGenericDao.findById(stafflistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No StaffList found with id: {}", stafflistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<StaffList> findByMultipleIds(List<StaffListId> stafflistIds, boolean orderedReturn) {
        LOGGER.debug("Finding StaffLists by ids: {}", stafflistIds);

        return this.wmGenericDao.findByMultipleIds(stafflistIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public StaffList update(StaffList staffList) {
        LOGGER.debug("Updating StaffList with information: {}", staffList);

        this.wmGenericDao.update(staffList);
        this.wmGenericDao.refresh(staffList);

        return staffList;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public StaffList delete(StaffListId stafflistId) {
        LOGGER.debug("Deleting StaffList with id: {}", stafflistId);
        StaffList deleted = this.wmGenericDao.findById(stafflistId);
        if (deleted == null) {
            LOGGER.debug("No StaffList found with id: {}", stafflistId);
            throw new EntityNotFoundException(String.valueOf(stafflistId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(StaffList staffList) {
        LOGGER.debug("Deleting StaffList with {}", staffList);
        this.wmGenericDao.delete(staffList);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<StaffList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StaffLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<StaffList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StaffLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table StaffList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table StaffList to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}