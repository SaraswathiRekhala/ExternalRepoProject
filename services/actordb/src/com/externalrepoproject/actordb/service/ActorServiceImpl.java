/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Actor;
import com.externalrepoproject.actordb.FilmActor;


/**
 * ServiceImpl object for domain model class Actor.
 *
 * @see Actor
 */
@Service("actordb.ActorService")
@Validated
public class ActorServiceImpl implements ActorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActorServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.FilmActorService")
    private FilmActorService filmActorService;

    @Autowired
    @Qualifier("actordb.ActorDao")
    private WMGenericDao<Actor, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Actor, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Actor create(Actor actor) {
        LOGGER.debug("Creating a new Actor with information: {}", actor);

        Actor actorCreated = this.wmGenericDao.create(actor);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(actorCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Actor getById(Short actorIdInstance) {
        LOGGER.debug("Finding Actor by id: {}", actorIdInstance);
        return this.wmGenericDao.findById(actorIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Actor findById(Short actorIdInstance) {
        LOGGER.debug("Finding Actor by id: {}", actorIdInstance);
        try {
            return this.wmGenericDao.findById(actorIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Actor found with id: {}", actorIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Actor> findByMultipleIds(List<Short> actorIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Actors by ids: {}", actorIdInstances);

        return this.wmGenericDao.findByMultipleIds(actorIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Actor update(Actor actor) {
        LOGGER.debug("Updating Actor with information: {}", actor);

        this.wmGenericDao.update(actor);
        this.wmGenericDao.refresh(actor);

        return actor;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Actor delete(Short actorIdInstance) {
        LOGGER.debug("Deleting Actor with id: {}", actorIdInstance);
        Actor deleted = this.wmGenericDao.findById(actorIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Actor found with id: {}", actorIdInstance);
            throw new EntityNotFoundException(String.valueOf(actorIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Actor actor) {
        LOGGER.debug("Deleting Actor with {}", actor);
        this.wmGenericDao.delete(actor);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Actor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Actors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Actor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Actors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Actor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Actor to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<FilmActor> findAssociatedFilmActors(Short actorId, Pageable pageable) {
        LOGGER.debug("Fetching all associated filmActors");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("actor.actorId = '" + actorId + "'");

        return filmActorService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FilmActorService instance
     */
    protected void setFilmActorService(FilmActorService service) {
        this.filmActorService = service;
    }

}