/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Payment;


/**
 * ServiceImpl object for domain model class Payment.
 *
 * @see Payment
 */
@Service("actordb.PaymentService")
@Validated
public class PaymentServiceImpl implements PaymentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentServiceImpl.class);


    @Autowired
    @Qualifier("actordb.PaymentDao")
    private WMGenericDao<Payment, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Payment, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Payment create(Payment payment) {
        LOGGER.debug("Creating a new Payment with information: {}", payment);

        Payment paymentCreated = this.wmGenericDao.create(payment);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(paymentCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Payment getById(Short paymentIdInstance) {
        LOGGER.debug("Finding Payment by id: {}", paymentIdInstance);
        return this.wmGenericDao.findById(paymentIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Payment findById(Short paymentIdInstance) {
        LOGGER.debug("Finding Payment by id: {}", paymentIdInstance);
        try {
            return this.wmGenericDao.findById(paymentIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Payment found with id: {}", paymentIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Payment> findByMultipleIds(List<Short> paymentIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Payments by ids: {}", paymentIdInstances);

        return this.wmGenericDao.findByMultipleIds(paymentIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Payment update(Payment payment) {
        LOGGER.debug("Updating Payment with information: {}", payment);

        this.wmGenericDao.update(payment);
        this.wmGenericDao.refresh(payment);

        return payment;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Payment delete(Short paymentIdInstance) {
        LOGGER.debug("Deleting Payment with id: {}", paymentIdInstance);
        Payment deleted = this.wmGenericDao.findById(paymentIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Payment found with id: {}", paymentIdInstance);
            throw new EntityNotFoundException(String.valueOf(paymentIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Payment payment) {
        LOGGER.debug("Deleting Payment with {}", payment);
        this.wmGenericDao.delete(payment);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Payment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Payment> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Payment to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Payment to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}