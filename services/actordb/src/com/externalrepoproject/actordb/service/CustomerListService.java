/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.CustomerList;
import com.externalrepoproject.actordb.CustomerListId;

/**
 * Service object for domain model class {@link CustomerList}.
 */
public interface CustomerListService {

    /**
     * Creates a new CustomerList. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CustomerList if any.
     *
     * @param customerList Details of the CustomerList to be created; value cannot be null.
     * @return The newly created CustomerList.
     */
    CustomerList create(@Valid CustomerList customerList);


	/**
     * Returns CustomerList by given id if exists.
     *
     * @param customerlistId The id of the CustomerList to get; value cannot be null.
     * @return CustomerList associated with the given customerlistId.
	 * @throws EntityNotFoundException If no CustomerList is found.
     */
    CustomerList getById(CustomerListId customerlistId);

    /**
     * Find and return the CustomerList by given id if exists, returns null otherwise.
     *
     * @param customerlistId The id of the CustomerList to get; value cannot be null.
     * @return CustomerList associated with the given customerlistId.
     */
    CustomerList findById(CustomerListId customerlistId);

	/**
     * Find and return the list of CustomerLists by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param customerlistIds The id's of the CustomerList to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CustomerLists associated with the given customerlistIds.
     */
    List<CustomerList> findByMultipleIds(List<CustomerListId> customerlistIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CustomerList. It replaces all fields of the existing CustomerList with the given customerList.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CustomerList if any.
     *
     * @param customerList The details of the CustomerList to be updated; value cannot be null.
     * @return The updated CustomerList.
     * @throws EntityNotFoundException if no CustomerList is found with given input.
     */
    CustomerList update(@Valid CustomerList customerList);

    /**
     * Deletes an existing CustomerList with the given id.
     *
     * @param customerlistId The id of the CustomerList to be deleted; value cannot be null.
     * @return The deleted CustomerList.
     * @throws EntityNotFoundException if no CustomerList found with the given id.
     */
    CustomerList delete(CustomerListId customerlistId);

    /**
     * Deletes an existing CustomerList with the given object.
     *
     * @param customerList The instance of the CustomerList to be deleted; value cannot be null.
     */
    void delete(CustomerList customerList);

    /**
     * Find all CustomerLists matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CustomerLists.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CustomerList> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CustomerLists matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CustomerLists.
     *
     * @see Pageable
     * @see Page
     */
    Page<CustomerList> findAll(String query, Pageable pageable);

    /**
     * Exports all CustomerLists matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CustomerLists matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CustomerLists in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CustomerList.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}