/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Payment;
import com.externalrepoproject.actordb.Rental;
import com.externalrepoproject.actordb.Staff;


/**
 * ServiceImpl object for domain model class Staff.
 *
 * @see Staff
 */
@Service("actordb.StaffService")
@Validated
public class StaffServiceImpl implements StaffService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.RentalService")
    private RentalService rentalService;

    @Lazy
    @Autowired
    @Qualifier("actordb.PaymentService")
    private PaymentService paymentService;

    @Autowired
    @Qualifier("actordb.StaffDao")
    private WMGenericDao<Staff, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Staff, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Staff create(Staff staff) {
        LOGGER.debug("Creating a new Staff with information: {}", staff);

        Staff staffCreated = this.wmGenericDao.create(staff);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(staffCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Staff getById(Short staffIdInstance) {
        LOGGER.debug("Finding Staff by id: {}", staffIdInstance);
        return this.wmGenericDao.findById(staffIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Staff findById(Short staffIdInstance) {
        LOGGER.debug("Finding Staff by id: {}", staffIdInstance);
        try {
            return this.wmGenericDao.findById(staffIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Staff found with id: {}", staffIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Staff> findByMultipleIds(List<Short> staffIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Staffs by ids: {}", staffIdInstances);

        return this.wmGenericDao.findByMultipleIds(staffIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Staff update(Staff staff) {
        LOGGER.debug("Updating Staff with information: {}", staff);

        this.wmGenericDao.update(staff);
        this.wmGenericDao.refresh(staff);

        return staff;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Staff delete(Short staffIdInstance) {
        LOGGER.debug("Deleting Staff with id: {}", staffIdInstance);
        Staff deleted = this.wmGenericDao.findById(staffIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Staff found with id: {}", staffIdInstance);
            throw new EntityNotFoundException(String.valueOf(staffIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Staff staff) {
        LOGGER.debug("Deleting Staff with {}", staff);
        this.wmGenericDao.delete(staff);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Staff> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Staffs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Staff> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Staffs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Staff to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Staff to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Payment> findAssociatedPayments(Short staffId, Pageable pageable) {
        LOGGER.debug("Fetching all associated payments");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("staff.staffId = '" + staffId + "'");

        return paymentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Rental> findAssociatedRentals(Short staffId, Pageable pageable) {
        LOGGER.debug("Fetching all associated rentals");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("staff.staffId = '" + staffId + "'");

        return rentalService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RentalService instance
     */
    protected void setRentalService(RentalService service) {
        this.rentalService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PaymentService instance
     */
    protected void setPaymentService(PaymentService service) {
        this.paymentService = service;
    }

}