/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Actor;
import com.externalrepoproject.actordb.FilmActor;

/**
 * Service object for domain model class {@link Actor}.
 */
public interface ActorService {

    /**
     * Creates a new Actor. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Actor if any.
     *
     * @param actor Details of the Actor to be created; value cannot be null.
     * @return The newly created Actor.
     */
    Actor create(@Valid Actor actor);


	/**
     * Returns Actor by given id if exists.
     *
     * @param actorIdInstance The id of the Actor to get; value cannot be null.
     * @return Actor associated with the given actorIdInstance.
	 * @throws EntityNotFoundException If no Actor is found.
     */
    Actor getById(Short actorIdInstance);

    /**
     * Find and return the Actor by given id if exists, returns null otherwise.
     *
     * @param actorIdInstance The id of the Actor to get; value cannot be null.
     * @return Actor associated with the given actorIdInstance.
     */
    Actor findById(Short actorIdInstance);

	/**
     * Find and return the list of Actors by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param actorIdInstances The id's of the Actor to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Actors associated with the given actorIdInstances.
     */
    List<Actor> findByMultipleIds(List<Short> actorIdInstances, boolean orderedReturn);


    /**
     * Updates the details of an existing Actor. It replaces all fields of the existing Actor with the given actor.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Actor if any.
     *
     * @param actor The details of the Actor to be updated; value cannot be null.
     * @return The updated Actor.
     * @throws EntityNotFoundException if no Actor is found with given input.
     */
    Actor update(@Valid Actor actor);

    /**
     * Deletes an existing Actor with the given id.
     *
     * @param actorIdInstance The id of the Actor to be deleted; value cannot be null.
     * @return The deleted Actor.
     * @throws EntityNotFoundException if no Actor found with the given id.
     */
    Actor delete(Short actorIdInstance);

    /**
     * Deletes an existing Actor with the given object.
     *
     * @param actor The instance of the Actor to be deleted; value cannot be null.
     */
    void delete(Actor actor);

    /**
     * Find all Actors matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Actors.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Actor> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Actors matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Actors.
     *
     * @see Pageable
     * @see Page
     */
    Page<Actor> findAll(String query, Pageable pageable);

    /**
     * Exports all Actors matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Actors matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Actors in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Actor.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated filmActors for given Actor id.
     *
     * @param actorId value of actorId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated FilmActor instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<FilmActor> findAssociatedFilmActors(Short actorId, Pageable pageable);

}