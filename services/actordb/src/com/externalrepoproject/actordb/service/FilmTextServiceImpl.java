/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.FilmText;


/**
 * ServiceImpl object for domain model class FilmText.
 *
 * @see FilmText
 */
@Service("actordb.FilmTextService")
@Validated
public class FilmTextServiceImpl implements FilmTextService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmTextServiceImpl.class);


    @Autowired
    @Qualifier("actordb.FilmTextDao")
    private WMGenericDao<FilmText, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FilmText, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public FilmText create(FilmText filmText) {
        LOGGER.debug("Creating a new FilmText with information: {}", filmText);

        FilmText filmTextCreated = this.wmGenericDao.create(filmText);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(filmTextCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public FilmText getById(Short filmtextId) {
        LOGGER.debug("Finding FilmText by id: {}", filmtextId);
        return this.wmGenericDao.findById(filmtextId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public FilmText findById(Short filmtextId) {
        LOGGER.debug("Finding FilmText by id: {}", filmtextId);
        try {
            return this.wmGenericDao.findById(filmtextId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No FilmText found with id: {}", filmtextId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<FilmText> findByMultipleIds(List<Short> filmtextIds, boolean orderedReturn) {
        LOGGER.debug("Finding FilmTexts by ids: {}", filmtextIds);

        return this.wmGenericDao.findByMultipleIds(filmtextIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public FilmText update(FilmText filmText) {
        LOGGER.debug("Updating FilmText with information: {}", filmText);

        this.wmGenericDao.update(filmText);
        this.wmGenericDao.refresh(filmText);

        return filmText;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public FilmText delete(Short filmtextId) {
        LOGGER.debug("Deleting FilmText with id: {}", filmtextId);
        FilmText deleted = this.wmGenericDao.findById(filmtextId);
        if (deleted == null) {
            LOGGER.debug("No FilmText found with id: {}", filmtextId);
            throw new EntityNotFoundException(String.valueOf(filmtextId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(FilmText filmText) {
        LOGGER.debug("Deleting FilmText with {}", filmText);
        this.wmGenericDao.delete(filmText);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<FilmText> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FilmTexts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<FilmText> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FilmTexts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table FilmText to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table FilmText to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}