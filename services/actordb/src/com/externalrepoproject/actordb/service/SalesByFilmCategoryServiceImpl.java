/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.SalesByFilmCategory;
import com.externalrepoproject.actordb.SalesByFilmCategoryId;


/**
 * ServiceImpl object for domain model class SalesByFilmCategory.
 *
 * @see SalesByFilmCategory
 */
@Service("actordb.SalesByFilmCategoryService")
@Validated
public class SalesByFilmCategoryServiceImpl implements SalesByFilmCategoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesByFilmCategoryServiceImpl.class);


    @Autowired
    @Qualifier("actordb.SalesByFilmCategoryDao")
    private WMGenericDao<SalesByFilmCategory, SalesByFilmCategoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SalesByFilmCategory, SalesByFilmCategoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public SalesByFilmCategory create(SalesByFilmCategory salesByFilmCategory) {
        LOGGER.debug("Creating a new SalesByFilmCategory with information: {}", salesByFilmCategory);

        SalesByFilmCategory salesByFilmCategoryCreated = this.wmGenericDao.create(salesByFilmCategory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(salesByFilmCategoryCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public SalesByFilmCategory getById(SalesByFilmCategoryId salesbyfilmcategoryId) {
        LOGGER.debug("Finding SalesByFilmCategory by id: {}", salesbyfilmcategoryId);
        return this.wmGenericDao.findById(salesbyfilmcategoryId);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public SalesByFilmCategory findById(SalesByFilmCategoryId salesbyfilmcategoryId) {
        LOGGER.debug("Finding SalesByFilmCategory by id: {}", salesbyfilmcategoryId);
        try {
            return this.wmGenericDao.findById(salesbyfilmcategoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SalesByFilmCategory found with id: {}", salesbyfilmcategoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<SalesByFilmCategory> findByMultipleIds(List<SalesByFilmCategoryId> salesbyfilmcategoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding SalesByFilmCategories by ids: {}", salesbyfilmcategoryIds);

        return this.wmGenericDao.findByMultipleIds(salesbyfilmcategoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public SalesByFilmCategory update(SalesByFilmCategory salesByFilmCategory) {
        LOGGER.debug("Updating SalesByFilmCategory with information: {}", salesByFilmCategory);

        this.wmGenericDao.update(salesByFilmCategory);
        this.wmGenericDao.refresh(salesByFilmCategory);

        return salesByFilmCategory;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public SalesByFilmCategory delete(SalesByFilmCategoryId salesbyfilmcategoryId) {
        LOGGER.debug("Deleting SalesByFilmCategory with id: {}", salesbyfilmcategoryId);
        SalesByFilmCategory deleted = this.wmGenericDao.findById(salesbyfilmcategoryId);
        if (deleted == null) {
            LOGGER.debug("No SalesByFilmCategory found with id: {}", salesbyfilmcategoryId);
            throw new EntityNotFoundException(String.valueOf(salesbyfilmcategoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(SalesByFilmCategory salesByFilmCategory) {
        LOGGER.debug("Deleting SalesByFilmCategory with {}", salesByFilmCategory);
        this.wmGenericDao.delete(salesByFilmCategory);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<SalesByFilmCategory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SalesByFilmCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<SalesByFilmCategory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SalesByFilmCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table SalesByFilmCategory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table SalesByFilmCategory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}