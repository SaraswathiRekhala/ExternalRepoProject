/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Address;
import com.externalrepoproject.actordb.Customer;
import com.externalrepoproject.actordb.Staff;
import com.externalrepoproject.actordb.Store;


/**
 * ServiceImpl object for domain model class Address.
 *
 * @see Address
 */
@Service("actordb.AddressService")
@Validated
public class AddressServiceImpl implements AddressService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddressServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("actordb.StaffService")
    private StaffService staffService;

    @Lazy
    @Autowired
    @Qualifier("actordb.StoreService")
    private StoreService storeService;

    @Lazy
    @Autowired
    @Qualifier("actordb.CustomerService")
    private CustomerService customerService;

    @Autowired
    @Qualifier("actordb.AddressDao")
    private WMGenericDao<Address, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Address, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Address create(Address addressInstance) {
        LOGGER.debug("Creating a new Address with information: {}", addressInstance);

        Address addressInstanceCreated = this.wmGenericDao.create(addressInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(addressInstanceCreated);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Address getById(Short addressIdInstance) {
        LOGGER.debug("Finding Address by id: {}", addressIdInstance);
        return this.wmGenericDao.findById(addressIdInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Address findById(Short addressIdInstance) {
        LOGGER.debug("Finding Address by id: {}", addressIdInstance);
        try {
            return this.wmGenericDao.findById(addressIdInstance);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Address found with id: {}", addressIdInstance, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public List<Address> findByMultipleIds(List<Short> addressIdInstances, boolean orderedReturn) {
        LOGGER.debug("Finding Addresses by ids: {}", addressIdInstances);

        return this.wmGenericDao.findByMultipleIds(addressIdInstances, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "actordbTransactionManager")
    @Override
    public Address update(Address addressInstance) {
        LOGGER.debug("Updating Address with information: {}", addressInstance);

        this.wmGenericDao.update(addressInstance);
        this.wmGenericDao.refresh(addressInstance);

        return addressInstance;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public Address delete(Short addressIdInstance) {
        LOGGER.debug("Deleting Address with id: {}", addressIdInstance);
        Address deleted = this.wmGenericDao.findById(addressIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Address found with id: {}", addressIdInstance);
            throw new EntityNotFoundException(String.valueOf(addressIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "actordbTransactionManager")
    @Override
    public void delete(Address addressInstance) {
        LOGGER.debug("Deleting Address with {}", addressInstance);
        this.wmGenericDao.delete(addressInstance);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Address> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Addresses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Address> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Addresses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service actordb for table Address to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service actordb for table Address to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Customer> findAssociatedCustomers(Short addressId, Pageable pageable) {
        LOGGER.debug("Fetching all associated customers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("address.addressId = '" + addressId + "'");

        return customerService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Staff> findAssociatedStaffs(Short addressId, Pageable pageable) {
        LOGGER.debug("Fetching all associated staffs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("address.addressId = '" + addressId + "'");

        return staffService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "actordbTransactionManager")
    @Override
    public Page<Store> findAssociatedStores(Short addressId, Pageable pageable) {
        LOGGER.debug("Fetching all associated stores");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("address.addressId = '" + addressId + "'");

        return storeService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service StaffService instance
     */
    protected void setStaffService(StaffService service) {
        this.staffService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service StoreService instance
     */
    protected void setStoreService(StoreService service) {
        this.storeService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CustomerService instance
     */
    protected void setCustomerService(CustomerService service) {
        this.customerService = service;
    }

}