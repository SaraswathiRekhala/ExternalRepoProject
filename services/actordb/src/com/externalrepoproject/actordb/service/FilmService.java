/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.actordb.Film;
import com.externalrepoproject.actordb.FilmActor;
import com.externalrepoproject.actordb.FilmCategory;
import com.externalrepoproject.actordb.Inventory;

/**
 * Service object for domain model class {@link Film}.
 */
public interface FilmService {

    /**
     * Creates a new Film. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Film if any.
     *
     * @param film Details of the Film to be created; value cannot be null.
     * @return The newly created Film.
     */
    Film create(@Valid Film film);


	/**
     * Returns Film by given id if exists.
     *
     * @param filmIdInstance The id of the Film to get; value cannot be null.
     * @return Film associated with the given filmIdInstance.
	 * @throws EntityNotFoundException If no Film is found.
     */
    Film getById(Short filmIdInstance);

    /**
     * Find and return the Film by given id if exists, returns null otherwise.
     *
     * @param filmIdInstance The id of the Film to get; value cannot be null.
     * @return Film associated with the given filmIdInstance.
     */
    Film findById(Short filmIdInstance);

	/**
     * Find and return the list of Films by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param filmIdInstances The id's of the Film to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Films associated with the given filmIdInstances.
     */
    List<Film> findByMultipleIds(List<Short> filmIdInstances, boolean orderedReturn);


    /**
     * Updates the details of an existing Film. It replaces all fields of the existing Film with the given film.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Film if any.
     *
     * @param film The details of the Film to be updated; value cannot be null.
     * @return The updated Film.
     * @throws EntityNotFoundException if no Film is found with given input.
     */
    Film update(@Valid Film film);

    /**
     * Deletes an existing Film with the given id.
     *
     * @param filmIdInstance The id of the Film to be deleted; value cannot be null.
     * @return The deleted Film.
     * @throws EntityNotFoundException if no Film found with the given id.
     */
    Film delete(Short filmIdInstance);

    /**
     * Deletes an existing Film with the given object.
     *
     * @param film The instance of the Film to be deleted; value cannot be null.
     */
    void delete(Film film);

    /**
     * Find all Films matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Films.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Film> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Films matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Films.
     *
     * @see Pageable
     * @see Page
     */
    Page<Film> findAll(String query, Pageable pageable);

    /**
     * Exports all Films matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Films matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Films in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Film.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated filmActors for given Film id.
     *
     * @param filmId value of filmId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated FilmActor instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<FilmActor> findAssociatedFilmActors(Short filmId, Pageable pageable);

    /*
     * Returns the associated filmCategories for given Film id.
     *
     * @param filmId value of filmId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated FilmCategory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<FilmCategory> findAssociatedFilmCategories(Short filmId, Pageable pageable);

    /*
     * Returns the associated inventories for given Film id.
     *
     * @param filmId value of filmId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Inventory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Inventory> findAssociatedInventories(Short filmId, Pageable pageable);

}