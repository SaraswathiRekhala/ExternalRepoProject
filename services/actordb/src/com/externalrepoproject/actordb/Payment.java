/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Payment generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`payment`")
public class Payment implements Serializable {

    private Short paymentId;
    private short customerId;
    private short staffId;
    private Integer rentalId;
    private float amount;
    private LocalDateTime paymentDate;
    private Timestamp lastUpdate;
    private Staff staff;
    private Customer customer;
    private Rental rental;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`payment_id`", nullable = false, scale = 0, precision = 5)
    public Short getPaymentId() {
        return this.paymentId;
    }

    public void setPaymentId(Short paymentId) {
        this.paymentId = paymentId;
    }

    @Column(name = "`customer_id`", nullable = false, scale = 0, precision = 5)
    public short getCustomerId() {
        return this.customerId;
    }

    public void setCustomerId(short customerId) {
        this.customerId = customerId;
    }

    @Column(name = "`staff_id`", nullable = false, scale = 0, precision = 3)
    public short getStaffId() {
        return this.staffId;
    }

    public void setStaffId(short staffId) {
        this.staffId = staffId;
    }

    @Column(name = "`rental_id`", nullable = true, scale = 0, precision = 10)
    public Integer getRentalId() {
        return this.rentalId;
    }

    public void setRentalId(Integer rentalId) {
        this.rentalId = rentalId;
    }

    @Column(name = "`amount`", nullable = false, scale = 2, precision = 5)
    public float getAmount() {
        return this.amount;
    }

    public void setAmount(float amount) {
        this.amount = amount;
    }

    @Column(name = "`payment_date`", nullable = false)
    public LocalDateTime getPaymentDate() {
        return this.paymentDate;
    }

    public void setPaymentDate(LocalDateTime paymentDate) {
        this.paymentDate = paymentDate;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`staff_id`", referencedColumnName = "`staff_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_payment_staff`"))
    @Fetch(FetchMode.JOIN)
    public Staff getStaff() {
        return this.staff;
    }

    public void setStaff(Staff staff) {
        if(staff != null) {
            this.staffId = staff.getStaffId();
        }

        this.staff = staff;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`customer_id`", referencedColumnName = "`customer_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_payment_customer`"))
    @Fetch(FetchMode.JOIN)
    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        if(customer != null) {
            this.customerId = customer.getCustomerId();
        }

        this.customer = customer;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`rental_id`", referencedColumnName = "`rental_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_payment_rental`"))
    @Fetch(FetchMode.JOIN)
    public Rental getRental() {
        return this.rental;
    }

    public void setRental(Rental rental) {
        if(rental != null) {
            this.rentalId = rental.getRentalId();
        }

        this.rental = rental;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Payment)) return false;
        final Payment payment = (Payment) o;
        return Objects.equals(getPaymentId(), payment.getPaymentId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPaymentId());
    }
}