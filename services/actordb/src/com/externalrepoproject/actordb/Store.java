/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Store generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`store`", uniqueConstraints = {
            @UniqueConstraint(name = "`idx_unique_manager`", columnNames = {"`manager_staff_id`"})})
public class Store implements Serializable {

    private Short storeId;
    private short managerStaffId;
    private short addressId;
    private Timestamp lastUpdate;
    private Address address;
    private Staff staffByManagerStaffId;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`store_id`", nullable = false, scale = 0, precision = 3)
    public Short getStoreId() {
        return this.storeId;
    }

    public void setStoreId(Short storeId) {
        this.storeId = storeId;
    }

    @Column(name = "`manager_staff_id`", nullable = false, scale = 0, precision = 3)
    public short getManagerStaffId() {
        return this.managerStaffId;
    }

    public void setManagerStaffId(short managerStaffId) {
        this.managerStaffId = managerStaffId;
    }

    @Column(name = "`address_id`", nullable = false, scale = 0, precision = 5)
    public short getAddressId() {
        return this.addressId;
    }

    public void setAddressId(short addressId) {
        this.addressId = addressId;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`address_id`", referencedColumnName = "`address_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_store_address`"))
    @Fetch(FetchMode.JOIN)
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        if(address != null) {
            this.addressId = address.getAddressId();
        }

        this.address = address;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`manager_staff_id`", referencedColumnName = "`staff_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_store_staff`"))
    @Fetch(FetchMode.JOIN)
    public Staff getStaffByManagerStaffId() {
        return this.staffByManagerStaffId;
    }

    public void setStaffByManagerStaffId(Staff staffByManagerStaffId) {
        if(staffByManagerStaffId != null) {
            this.managerStaffId = staffByManagerStaffId.getStaffId();
        }

        this.staffByManagerStaffId = staffByManagerStaffId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Store)) return false;
        final Store store = (Store) o;
        return Objects.equals(getStoreId(), store.getStoreId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStoreId());
    }
}