/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.NicerButSlowerFilmList;
import com.externalrepoproject.actordb.NicerButSlowerFilmListId;
import com.externalrepoproject.actordb.service.NicerButSlowerFilmListService;


/**
 * Controller object for domain model class NicerButSlowerFilmList.
 * @see NicerButSlowerFilmList
 */
@RestController("actordb.NicerButSlowerFilmListController")
@Api(value = "NicerButSlowerFilmListController", description = "Exposes APIs to work with NicerButSlowerFilmList resource.")
@RequestMapping("/actordb/NicerButSlowerFilmList")
public class NicerButSlowerFilmListController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NicerButSlowerFilmListController.class);

    @Autowired
	@Qualifier("actordb.NicerButSlowerFilmListService")
	private NicerButSlowerFilmListService nicerButSlowerFilmListService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new NicerButSlowerFilmList instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NicerButSlowerFilmList createNicerButSlowerFilmList(@RequestBody NicerButSlowerFilmList nicerButSlowerFilmList) {
		LOGGER.debug("Create NicerButSlowerFilmList with information: {}" , nicerButSlowerFilmList);

		nicerButSlowerFilmList = nicerButSlowerFilmListService.create(nicerButSlowerFilmList);
		LOGGER.debug("Created NicerButSlowerFilmList with information: {}" , nicerButSlowerFilmList);

	    return nicerButSlowerFilmList;
	}

    @ApiOperation(value = "Returns the NicerButSlowerFilmList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NicerButSlowerFilmList getNicerButSlowerFilmList(@RequestParam("fid") Short fid, @RequestParam("title") String title, @RequestParam("description") String description, @RequestParam("category") String category, @RequestParam("price") Float price, @RequestParam("length") Short length, @RequestParam("rating") String rating, @RequestParam("actors") String actors) {

        NicerButSlowerFilmListId nicerbutslowerfilmlistId = new NicerButSlowerFilmListId();
        nicerbutslowerfilmlistId.setFid(fid);
        nicerbutslowerfilmlistId.setTitle(title);
        nicerbutslowerfilmlistId.setDescription(description);
        nicerbutslowerfilmlistId.setCategory(category);
        nicerbutslowerfilmlistId.setPrice(price);
        nicerbutslowerfilmlistId.setLength(length);
        nicerbutslowerfilmlistId.setRating(rating);
        nicerbutslowerfilmlistId.setActors(actors);

        LOGGER.debug("Getting NicerButSlowerFilmList with id: {}" , nicerbutslowerfilmlistId);
        NicerButSlowerFilmList nicerButSlowerFilmList = nicerButSlowerFilmListService.getById(nicerbutslowerfilmlistId);
        LOGGER.debug("NicerButSlowerFilmList details with id: {}" , nicerButSlowerFilmList);

        return nicerButSlowerFilmList;
    }



    @ApiOperation(value = "Updates the NicerButSlowerFilmList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NicerButSlowerFilmList editNicerButSlowerFilmList(@RequestParam("fid") Short fid, @RequestParam("title") String title, @RequestParam("description") String description, @RequestParam("category") String category, @RequestParam("price") Float price, @RequestParam("length") Short length, @RequestParam("rating") String rating, @RequestParam("actors") String actors, @RequestBody NicerButSlowerFilmList nicerButSlowerFilmList) {

        nicerButSlowerFilmList.setFid(fid);
        nicerButSlowerFilmList.setTitle(title);
        nicerButSlowerFilmList.setDescription(description);
        nicerButSlowerFilmList.setCategory(category);
        nicerButSlowerFilmList.setPrice(price);
        nicerButSlowerFilmList.setLength(length);
        nicerButSlowerFilmList.setRating(rating);
        nicerButSlowerFilmList.setActors(actors);

        LOGGER.debug("NicerButSlowerFilmList details with id is updated with: {}" , nicerButSlowerFilmList);

        return nicerButSlowerFilmListService.update(nicerButSlowerFilmList);
    }


    @ApiOperation(value = "Deletes the NicerButSlowerFilmList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNicerButSlowerFilmList(@RequestParam("fid") Short fid, @RequestParam("title") String title, @RequestParam("description") String description, @RequestParam("category") String category, @RequestParam("price") Float price, @RequestParam("length") Short length, @RequestParam("rating") String rating, @RequestParam("actors") String actors) {

        NicerButSlowerFilmListId nicerbutslowerfilmlistId = new NicerButSlowerFilmListId();
        nicerbutslowerfilmlistId.setFid(fid);
        nicerbutslowerfilmlistId.setTitle(title);
        nicerbutslowerfilmlistId.setDescription(description);
        nicerbutslowerfilmlistId.setCategory(category);
        nicerbutslowerfilmlistId.setPrice(price);
        nicerbutslowerfilmlistId.setLength(length);
        nicerbutslowerfilmlistId.setRating(rating);
        nicerbutslowerfilmlistId.setActors(actors);

        LOGGER.debug("Deleting NicerButSlowerFilmList with id: {}" , nicerbutslowerfilmlistId);
        NicerButSlowerFilmList nicerButSlowerFilmList = nicerButSlowerFilmListService.delete(nicerbutslowerfilmlistId);

        return nicerButSlowerFilmList != null;
    }


    /**
     * @deprecated Use {@link #findNicerButSlowerFilmLists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NicerButSlowerFilmList instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NicerButSlowerFilmList> searchNicerButSlowerFilmListsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NicerButSlowerFilmLists list by query filter:{}", (Object) queryFilters);
        return nicerButSlowerFilmListService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NicerButSlowerFilmList instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NicerButSlowerFilmList> findNicerButSlowerFilmLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NicerButSlowerFilmLists list by filter:", query);
        return nicerButSlowerFilmListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NicerButSlowerFilmList instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NicerButSlowerFilmList> filterNicerButSlowerFilmLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NicerButSlowerFilmLists list by filter", query);
        return nicerButSlowerFilmListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNicerButSlowerFilmLists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nicerButSlowerFilmListService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportNicerButSlowerFilmListsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = NicerButSlowerFilmList.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> nicerButSlowerFilmListService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of NicerButSlowerFilmList instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countNicerButSlowerFilmLists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NicerButSlowerFilmLists");
		return nicerButSlowerFilmListService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getNicerButSlowerFilmListAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nicerButSlowerFilmListService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NicerButSlowerFilmListService instance
	 */
	protected void setNicerButSlowerFilmListService(NicerButSlowerFilmListService service) {
		this.nicerButSlowerFilmListService = service;
	}

}