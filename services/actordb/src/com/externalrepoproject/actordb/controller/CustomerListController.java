/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.CustomerList;
import com.externalrepoproject.actordb.CustomerListId;
import com.externalrepoproject.actordb.service.CustomerListService;


/**
 * Controller object for domain model class CustomerList.
 * @see CustomerList
 */
@RestController("actordb.CustomerListController")
@Api(value = "CustomerListController", description = "Exposes APIs to work with CustomerList resource.")
@RequestMapping("/actordb/CustomerList")
public class CustomerListController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerListController.class);

    @Autowired
	@Qualifier("actordb.CustomerListService")
	private CustomerListService customerListService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CustomerList instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerList createCustomerList(@RequestBody CustomerList customerList) {
		LOGGER.debug("Create CustomerList with information: {}" , customerList);

		customerList = customerListService.create(customerList);
		LOGGER.debug("Created CustomerList with information: {}" , customerList);

	    return customerList;
	}

    @ApiOperation(value = "Returns the CustomerList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerList getCustomerList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("notes") String notes, @RequestParam("sid") Short sid) {

        CustomerListId customerlistId = new CustomerListId();
        customerlistId.setId(id);
        customerlistId.setName(name);
        customerlistId.setAddress(address);
        customerlistId.setZipCode(zipCode);
        customerlistId.setPhone(phone);
        customerlistId.setCity(city);
        customerlistId.setCountry(country);
        customerlistId.setNotes(notes);
        customerlistId.setSid(sid);

        LOGGER.debug("Getting CustomerList with id: {}" , customerlistId);
        CustomerList customerList = customerListService.getById(customerlistId);
        LOGGER.debug("CustomerList details with id: {}" , customerList);

        return customerList;
    }



    @ApiOperation(value = "Updates the CustomerList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerList editCustomerList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("notes") String notes, @RequestParam("sid") Short sid, @RequestBody CustomerList customerList) {

        customerList.setId(id);
        customerList.setName(name);
        customerList.setAddress(address);
        customerList.setZipCode(zipCode);
        customerList.setPhone(phone);
        customerList.setCity(city);
        customerList.setCountry(country);
        customerList.setNotes(notes);
        customerList.setSid(sid);

        LOGGER.debug("CustomerList details with id is updated with: {}" , customerList);

        return customerListService.update(customerList);
    }


    @ApiOperation(value = "Deletes the CustomerList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCustomerList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("notes") String notes, @RequestParam("sid") Short sid) {

        CustomerListId customerlistId = new CustomerListId();
        customerlistId.setId(id);
        customerlistId.setName(name);
        customerlistId.setAddress(address);
        customerlistId.setZipCode(zipCode);
        customerlistId.setPhone(phone);
        customerlistId.setCity(city);
        customerlistId.setCountry(country);
        customerlistId.setNotes(notes);
        customerlistId.setSid(sid);

        LOGGER.debug("Deleting CustomerList with id: {}" , customerlistId);
        CustomerList customerList = customerListService.delete(customerlistId);

        return customerList != null;
    }


    /**
     * @deprecated Use {@link #findCustomerLists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CustomerList instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerList> searchCustomerListsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CustomerLists list by query filter:{}", (Object) queryFilters);
        return customerListService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerList instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerList> findCustomerLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerLists list by filter:", query);
        return customerListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerList instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerList> filterCustomerLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerLists list by filter", query);
        return customerListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCustomerLists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return customerListService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCustomerListsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CustomerList.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> customerListService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CustomerList instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCustomerLists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CustomerLists");
		return customerListService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCustomerListAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return customerListService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomerListService instance
	 */
	protected void setCustomerListService(CustomerListService service) {
		this.customerListService = service;
	}

}