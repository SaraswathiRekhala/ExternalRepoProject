/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.Film;
import com.externalrepoproject.actordb.Language;
import com.externalrepoproject.actordb.service.LanguageService;


/**
 * Controller object for domain model class Language.
 * @see Language
 */
@RestController("actordb.LanguageController")
@Api(value = "LanguageController", description = "Exposes APIs to work with Language resource.")
@RequestMapping("/actordb/Language")
public class LanguageController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LanguageController.class);

    @Autowired
	@Qualifier("actordb.LanguageService")
	private LanguageService languageService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Language instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Language createLanguage(@RequestBody Language language) {
		LOGGER.debug("Create Language with information: {}" , language);

		language = languageService.create(language);
		LOGGER.debug("Created Language with information: {}" , language);

	    return language;
	}

    @ApiOperation(value = "Returns the Language instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Language getLanguage(@PathVariable("id") Short id) {
        LOGGER.debug("Getting Language with id: {}" , id);

        Language foundLanguage = languageService.getById(id);
        LOGGER.debug("Language details with id: {}" , foundLanguage);

        return foundLanguage;
    }

    @ApiOperation(value = "Updates the Language instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Language editLanguage(@PathVariable("id") Short id, @RequestBody Language language) {
        LOGGER.debug("Editing Language with id: {}" , language.getLanguageId());

        language.setLanguageId(id);
        language = languageService.update(language);
        LOGGER.debug("Language details with id: {}" , language);

        return language;
    }

    @ApiOperation(value = "Deletes the Language instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLanguage(@PathVariable("id") Short id) {
        LOGGER.debug("Deleting Language with id: {}" , id);

        Language deletedLanguage = languageService.delete(id);

        return deletedLanguage != null;
    }

    /**
     * @deprecated Use {@link #findLanguages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Language instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Language> searchLanguagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Languages list by query filter:{}", (Object) queryFilters);
        return languageService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Language instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Language> findLanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Languages list by filter:", query);
        return languageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Language instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Language> filterLanguages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Languages list by filter", query);
        return languageService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLanguages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return languageService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLanguagesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Language.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> languageService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Language instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLanguages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Languages");
		return languageService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLanguageAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return languageService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/filmsForOriginalLanguageId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the filmsForOriginalLanguageId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> findAssociatedFilmsForOriginalLanguageId(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated filmsForOriginalLanguageId");
        return languageService.findAssociatedFilmsForOriginalLanguageId(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/filmsForLanguageId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the filmsForLanguageId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> findAssociatedFilmsForLanguageId(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated filmsForLanguageId");
        return languageService.findAssociatedFilmsForLanguageId(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LanguageService instance
	 */
	protected void setLanguageService(LanguageService service) {
		this.languageService = service;
	}

}