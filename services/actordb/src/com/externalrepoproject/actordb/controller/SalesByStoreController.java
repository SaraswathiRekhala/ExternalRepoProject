/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.SalesByStore;
import com.externalrepoproject.actordb.SalesByStoreId;
import com.externalrepoproject.actordb.service.SalesByStoreService;


/**
 * Controller object for domain model class SalesByStore.
 * @see SalesByStore
 */
@RestController("actordb.SalesByStoreController")
@Api(value = "SalesByStoreController", description = "Exposes APIs to work with SalesByStore resource.")
@RequestMapping("/actordb/SalesByStore")
public class SalesByStoreController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesByStoreController.class);

    @Autowired
	@Qualifier("actordb.SalesByStoreService")
	private SalesByStoreService salesByStoreService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SalesByStore instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByStore createSalesByStore(@RequestBody SalesByStore salesByStore) {
		LOGGER.debug("Create SalesByStore with information: {}" , salesByStore);

		salesByStore = salesByStoreService.create(salesByStore);
		LOGGER.debug("Created SalesByStore with information: {}" , salesByStore);

	    return salesByStore;
	}

    @ApiOperation(value = "Returns the SalesByStore instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByStore getSalesByStore(@RequestParam("store") String store, @RequestParam("manager") String manager, @RequestParam("totalSales") BigDecimal totalSales) {

        SalesByStoreId salesbystoreId = new SalesByStoreId();
        salesbystoreId.setStore(store);
        salesbystoreId.setManager(manager);
        salesbystoreId.setTotalSales(totalSales);

        LOGGER.debug("Getting SalesByStore with id: {}" , salesbystoreId);
        SalesByStore salesByStore = salesByStoreService.getById(salesbystoreId);
        LOGGER.debug("SalesByStore details with id: {}" , salesByStore);

        return salesByStore;
    }



    @ApiOperation(value = "Updates the SalesByStore instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByStore editSalesByStore(@RequestParam("store") String store, @RequestParam("manager") String manager, @RequestParam("totalSales") BigDecimal totalSales, @RequestBody SalesByStore salesByStore) {

        salesByStore.setStore(store);
        salesByStore.setManager(manager);
        salesByStore.setTotalSales(totalSales);

        LOGGER.debug("SalesByStore details with id is updated with: {}" , salesByStore);

        return salesByStoreService.update(salesByStore);
    }


    @ApiOperation(value = "Deletes the SalesByStore instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSalesByStore(@RequestParam("store") String store, @RequestParam("manager") String manager, @RequestParam("totalSales") BigDecimal totalSales) {

        SalesByStoreId salesbystoreId = new SalesByStoreId();
        salesbystoreId.setStore(store);
        salesbystoreId.setManager(manager);
        salesbystoreId.setTotalSales(totalSales);

        LOGGER.debug("Deleting SalesByStore with id: {}" , salesbystoreId);
        SalesByStore salesByStore = salesByStoreService.delete(salesbystoreId);

        return salesByStore != null;
    }


    /**
     * @deprecated Use {@link #findSalesByStores(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SalesByStore instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByStore> searchSalesByStoresByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SalesByStores list by query filter:{}", (Object) queryFilters);
        return salesByStoreService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesByStore instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByStore> findSalesByStores(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesByStores list by filter:", query);
        return salesByStoreService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesByStore instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByStore> filterSalesByStores(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesByStores list by filter", query);
        return salesByStoreService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSalesByStores(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return salesByStoreService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSalesByStoresAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SalesByStore.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> salesByStoreService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SalesByStore instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSalesByStores( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SalesByStores");
		return salesByStoreService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSalesByStoreAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return salesByStoreService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SalesByStoreService instance
	 */
	protected void setSalesByStoreService(SalesByStoreService service) {
		this.salesByStoreService = service;
	}

}