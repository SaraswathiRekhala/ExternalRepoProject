/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.FilmActor;
import com.externalrepoproject.actordb.FilmActorId;
import com.externalrepoproject.actordb.service.FilmActorService;


/**
 * Controller object for domain model class FilmActor.
 * @see FilmActor
 */
@RestController("actordb.FilmActorController")
@Api(value = "FilmActorController", description = "Exposes APIs to work with FilmActor resource.")
@RequestMapping("/actordb/FilmActor")
public class FilmActorController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmActorController.class);

    @Autowired
	@Qualifier("actordb.FilmActorService")
	private FilmActorService filmActorService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FilmActor instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmActor createFilmActor(@RequestBody FilmActor filmActor) {
		LOGGER.debug("Create FilmActor with information: {}" , filmActor);

		filmActor = filmActorService.create(filmActor);
		LOGGER.debug("Created FilmActor with information: {}" , filmActor);

	    return filmActor;
	}

    @ApiOperation(value = "Returns the FilmActor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmActor getFilmActor(@RequestParam("actorId") Short actorId, @RequestParam("filmId") Short filmId) {

        FilmActorId filmactorId = new FilmActorId();
        filmactorId.setActorId(actorId);
        filmactorId.setFilmId(filmId);

        LOGGER.debug("Getting FilmActor with id: {}" , filmactorId);
        FilmActor filmActor = filmActorService.getById(filmactorId);
        LOGGER.debug("FilmActor details with id: {}" , filmActor);

        return filmActor;
    }



    @ApiOperation(value = "Updates the FilmActor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmActor editFilmActor(@RequestParam("actorId") Short actorId, @RequestParam("filmId") Short filmId, @RequestBody FilmActor filmActor) {

        filmActor.setActorId(actorId);
        filmActor.setFilmId(filmId);

        LOGGER.debug("FilmActor details with id is updated with: {}" , filmActor);

        return filmActorService.update(filmActor);
    }


    @ApiOperation(value = "Deletes the FilmActor instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFilmActor(@RequestParam("actorId") Short actorId, @RequestParam("filmId") Short filmId) {

        FilmActorId filmactorId = new FilmActorId();
        filmactorId.setActorId(actorId);
        filmactorId.setFilmId(filmId);

        LOGGER.debug("Deleting FilmActor with id: {}" , filmactorId);
        FilmActor filmActor = filmActorService.delete(filmactorId);

        return filmActor != null;
    }


    /**
     * @deprecated Use {@link #findFilmActors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FilmActor instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmActor> searchFilmActorsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FilmActors list by query filter:{}", (Object) queryFilters);
        return filmActorService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilmActor instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmActor> findFilmActors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilmActors list by filter:", query);
        return filmActorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilmActor instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmActor> filterFilmActors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilmActors list by filter", query);
        return filmActorService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFilmActors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return filmActorService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFilmActorsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FilmActor.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> filmActorService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FilmActor instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFilmActors( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FilmActors");
		return filmActorService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFilmActorAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return filmActorService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmActorService instance
	 */
	protected void setFilmActorService(FilmActorService service) {
		this.filmActorService = service;
	}

}