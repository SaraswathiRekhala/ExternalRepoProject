/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.Film;
import com.externalrepoproject.actordb.FilmActor;
import com.externalrepoproject.actordb.FilmCategory;
import com.externalrepoproject.actordb.Inventory;
import com.externalrepoproject.actordb.service.FilmService;


/**
 * Controller object for domain model class Film.
 * @see Film
 */
@RestController("actordb.FilmController")
@Api(value = "FilmController", description = "Exposes APIs to work with Film resource.")
@RequestMapping("/actordb/Film")
public class FilmController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmController.class);

    @Autowired
	@Qualifier("actordb.FilmService")
	private FilmService filmService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Film instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film createFilm(@RequestBody Film film) {
		LOGGER.debug("Create Film with information: {}" , film);

		film = filmService.create(film);
		LOGGER.debug("Created Film with information: {}" , film);

	    return film;
	}

    @ApiOperation(value = "Returns the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film getFilm(@PathVariable("id") Short id) {
        LOGGER.debug("Getting Film with id: {}" , id);

        Film foundFilm = filmService.getById(id);
        LOGGER.debug("Film details with id: {}" , foundFilm);

        return foundFilm;
    }

    @ApiOperation(value = "Updates the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Film editFilm(@PathVariable("id") Short id, @RequestBody Film film) {
        LOGGER.debug("Editing Film with id: {}" , film.getFilmId());

        film.setFilmId(id);
        film = filmService.update(film);
        LOGGER.debug("Film details with id: {}" , film);

        return film;
    }

    @ApiOperation(value = "Deletes the Film instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFilm(@PathVariable("id") Short id) {
        LOGGER.debug("Deleting Film with id: {}" , id);

        Film deletedFilm = filmService.delete(id);

        return deletedFilm != null;
    }

    /**
     * @deprecated Use {@link #findFilms(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Film instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> searchFilmsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Films list by query filter:{}", (Object) queryFilters);
        return filmService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Film instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> findFilms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Films list by filter:", query);
        return filmService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Film instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Film> filterFilms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Films list by filter", query);
        return filmService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFilms(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return filmService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFilmsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Film.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> filmService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Film instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFilms( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Films");
		return filmService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFilmAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return filmService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/filmActors", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the filmActors instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmActor> findAssociatedFilmActors(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated filmActors");
        return filmService.findAssociatedFilmActors(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/filmCategories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the filmCategories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmCategory> findAssociatedFilmCategories(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated filmCategories");
        return filmService.findAssociatedFilmCategories(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/inventories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the inventories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inventory> findAssociatedInventories(@PathVariable("id") Short id, Pageable pageable) {

        LOGGER.debug("Fetching all associated inventories");
        return filmService.findAssociatedInventories(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmService instance
	 */
	protected void setFilmService(FilmService service) {
		this.filmService = service;
	}

}