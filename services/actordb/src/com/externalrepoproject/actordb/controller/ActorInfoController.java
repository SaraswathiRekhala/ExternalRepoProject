/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.ActorInfo;
import com.externalrepoproject.actordb.ActorInfoId;
import com.externalrepoproject.actordb.service.ActorInfoService;


/**
 * Controller object for domain model class ActorInfo.
 * @see ActorInfo
 */
@RestController("actordb.ActorInfoController")
@Api(value = "ActorInfoController", description = "Exposes APIs to work with ActorInfo resource.")
@RequestMapping("/actordb/ActorInfo")
public class ActorInfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActorInfoController.class);

    @Autowired
	@Qualifier("actordb.ActorInfoService")
	private ActorInfoService actorInfoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ActorInfo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActorInfo createActorInfo(@RequestBody ActorInfo actorInfo) {
		LOGGER.debug("Create ActorInfo with information: {}" , actorInfo);

		actorInfo = actorInfoService.create(actorInfo);
		LOGGER.debug("Created ActorInfo with information: {}" , actorInfo);

	    return actorInfo;
	}

    @ApiOperation(value = "Returns the ActorInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActorInfo getActorInfo(@RequestParam("actorId") Short actorId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("filmInfo") String filmInfo) {

        ActorInfoId actorinfoId = new ActorInfoId();
        actorinfoId.setActorId(actorId);
        actorinfoId.setFirstName(firstName);
        actorinfoId.setLastName(lastName);
        actorinfoId.setFilmInfo(filmInfo);

        LOGGER.debug("Getting ActorInfo with id: {}" , actorinfoId);
        ActorInfo actorInfo = actorInfoService.getById(actorinfoId);
        LOGGER.debug("ActorInfo details with id: {}" , actorInfo);

        return actorInfo;
    }



    @ApiOperation(value = "Updates the ActorInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActorInfo editActorInfo(@RequestParam("actorId") Short actorId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("filmInfo") String filmInfo, @RequestBody ActorInfo actorInfo) {

        actorInfo.setActorId(actorId);
        actorInfo.setFirstName(firstName);
        actorInfo.setLastName(lastName);
        actorInfo.setFilmInfo(filmInfo);

        LOGGER.debug("ActorInfo details with id is updated with: {}" , actorInfo);

        return actorInfoService.update(actorInfo);
    }


    @ApiOperation(value = "Deletes the ActorInfo instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteActorInfo(@RequestParam("actorId") Short actorId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("filmInfo") String filmInfo) {

        ActorInfoId actorinfoId = new ActorInfoId();
        actorinfoId.setActorId(actorId);
        actorinfoId.setFirstName(firstName);
        actorinfoId.setLastName(lastName);
        actorinfoId.setFilmInfo(filmInfo);

        LOGGER.debug("Deleting ActorInfo with id: {}" , actorinfoId);
        ActorInfo actorInfo = actorInfoService.delete(actorinfoId);

        return actorInfo != null;
    }


    /**
     * @deprecated Use {@link #findActorInfos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ActorInfo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActorInfo> searchActorInfosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ActorInfos list by query filter:{}", (Object) queryFilters);
        return actorInfoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActorInfo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActorInfo> findActorInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActorInfos list by filter:", query);
        return actorInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActorInfo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActorInfo> filterActorInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActorInfos list by filter", query);
        return actorInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportActorInfos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return actorInfoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportActorInfosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ActorInfo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> actorInfoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ActorInfo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countActorInfos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ActorInfos");
		return actorInfoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getActorInfoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return actorInfoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ActorInfoService instance
	 */
	protected void setActorInfoService(ActorInfoService service) {
		this.actorInfoService = service;
	}

}