/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.StaffList;
import com.externalrepoproject.actordb.StaffListId;
import com.externalrepoproject.actordb.service.StaffListService;


/**
 * Controller object for domain model class StaffList.
 * @see StaffList
 */
@RestController("actordb.StaffListController")
@Api(value = "StaffListController", description = "Exposes APIs to work with StaffList resource.")
@RequestMapping("/actordb/StaffList")
public class StaffListController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffListController.class);

    @Autowired
	@Qualifier("actordb.StaffListService")
	private StaffListService staffListService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new StaffList instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StaffList createStaffList(@RequestBody StaffList staffList) {
		LOGGER.debug("Create StaffList with information: {}" , staffList);

		staffList = staffListService.create(staffList);
		LOGGER.debug("Created StaffList with information: {}" , staffList);

	    return staffList;
	}

    @ApiOperation(value = "Returns the StaffList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StaffList getStaffList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("sid") Short sid) {

        StaffListId stafflistId = new StaffListId();
        stafflistId.setId(id);
        stafflistId.setName(name);
        stafflistId.setAddress(address);
        stafflistId.setZipCode(zipCode);
        stafflistId.setPhone(phone);
        stafflistId.setCity(city);
        stafflistId.setCountry(country);
        stafflistId.setSid(sid);

        LOGGER.debug("Getting StaffList with id: {}" , stafflistId);
        StaffList staffList = staffListService.getById(stafflistId);
        LOGGER.debug("StaffList details with id: {}" , staffList);

        return staffList;
    }



    @ApiOperation(value = "Updates the StaffList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StaffList editStaffList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("sid") Short sid, @RequestBody StaffList staffList) {

        staffList.setId(id);
        staffList.setName(name);
        staffList.setAddress(address);
        staffList.setZipCode(zipCode);
        staffList.setPhone(phone);
        staffList.setCity(city);
        staffList.setCountry(country);
        staffList.setSid(sid);

        LOGGER.debug("StaffList details with id is updated with: {}" , staffList);

        return staffListService.update(staffList);
    }


    @ApiOperation(value = "Deletes the StaffList instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStaffList(@RequestParam("id") Short id, @RequestParam("name") String name, @RequestParam("address") String address, @RequestParam("zipCode") String zipCode, @RequestParam("phone") String phone, @RequestParam("city") String city, @RequestParam("country") String country, @RequestParam("sid") Short sid) {

        StaffListId stafflistId = new StaffListId();
        stafflistId.setId(id);
        stafflistId.setName(name);
        stafflistId.setAddress(address);
        stafflistId.setZipCode(zipCode);
        stafflistId.setPhone(phone);
        stafflistId.setCity(city);
        stafflistId.setCountry(country);
        stafflistId.setSid(sid);

        LOGGER.debug("Deleting StaffList with id: {}" , stafflistId);
        StaffList staffList = staffListService.delete(stafflistId);

        return staffList != null;
    }


    /**
     * @deprecated Use {@link #findStaffLists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of StaffList instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StaffList> searchStaffListsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StaffLists list by query filter:{}", (Object) queryFilters);
        return staffListService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StaffList instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StaffList> findStaffLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StaffLists list by filter:", query);
        return staffListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StaffList instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StaffList> filterStaffLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StaffLists list by filter", query);
        return staffListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStaffLists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return staffListService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStaffListsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = StaffList.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> staffListService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of StaffList instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStaffLists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting StaffLists");
		return staffListService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStaffListAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return staffListService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StaffListService instance
	 */
	protected void setStaffListService(StaffListService service) {
		this.staffListService = service;
	}

}