/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.SalesByFilmCategory;
import com.externalrepoproject.actordb.SalesByFilmCategoryId;
import com.externalrepoproject.actordb.service.SalesByFilmCategoryService;


/**
 * Controller object for domain model class SalesByFilmCategory.
 * @see SalesByFilmCategory
 */
@RestController("actordb.SalesByFilmCategoryController")
@Api(value = "SalesByFilmCategoryController", description = "Exposes APIs to work with SalesByFilmCategory resource.")
@RequestMapping("/actordb/SalesByFilmCategory")
public class SalesByFilmCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesByFilmCategoryController.class);

    @Autowired
	@Qualifier("actordb.SalesByFilmCategoryService")
	private SalesByFilmCategoryService salesByFilmCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SalesByFilmCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByFilmCategory createSalesByFilmCategory(@RequestBody SalesByFilmCategory salesByFilmCategory) {
		LOGGER.debug("Create SalesByFilmCategory with information: {}" , salesByFilmCategory);

		salesByFilmCategory = salesByFilmCategoryService.create(salesByFilmCategory);
		LOGGER.debug("Created SalesByFilmCategory with information: {}" , salesByFilmCategory);

	    return salesByFilmCategory;
	}

    @ApiOperation(value = "Returns the SalesByFilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByFilmCategory getSalesByFilmCategory(@RequestParam("category") String category, @RequestParam("totalSales") BigDecimal totalSales) {

        SalesByFilmCategoryId salesbyfilmcategoryId = new SalesByFilmCategoryId();
        salesbyfilmcategoryId.setCategory(category);
        salesbyfilmcategoryId.setTotalSales(totalSales);

        LOGGER.debug("Getting SalesByFilmCategory with id: {}" , salesbyfilmcategoryId);
        SalesByFilmCategory salesByFilmCategory = salesByFilmCategoryService.getById(salesbyfilmcategoryId);
        LOGGER.debug("SalesByFilmCategory details with id: {}" , salesByFilmCategory);

        return salesByFilmCategory;
    }



    @ApiOperation(value = "Updates the SalesByFilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SalesByFilmCategory editSalesByFilmCategory(@RequestParam("category") String category, @RequestParam("totalSales") BigDecimal totalSales, @RequestBody SalesByFilmCategory salesByFilmCategory) {

        salesByFilmCategory.setCategory(category);
        salesByFilmCategory.setTotalSales(totalSales);

        LOGGER.debug("SalesByFilmCategory details with id is updated with: {}" , salesByFilmCategory);

        return salesByFilmCategoryService.update(salesByFilmCategory);
    }


    @ApiOperation(value = "Deletes the SalesByFilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSalesByFilmCategory(@RequestParam("category") String category, @RequestParam("totalSales") BigDecimal totalSales) {

        SalesByFilmCategoryId salesbyfilmcategoryId = new SalesByFilmCategoryId();
        salesbyfilmcategoryId.setCategory(category);
        salesbyfilmcategoryId.setTotalSales(totalSales);

        LOGGER.debug("Deleting SalesByFilmCategory with id: {}" , salesbyfilmcategoryId);
        SalesByFilmCategory salesByFilmCategory = salesByFilmCategoryService.delete(salesbyfilmcategoryId);

        return salesByFilmCategory != null;
    }


    /**
     * @deprecated Use {@link #findSalesByFilmCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SalesByFilmCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByFilmCategory> searchSalesByFilmCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SalesByFilmCategories list by query filter:{}", (Object) queryFilters);
        return salesByFilmCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesByFilmCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByFilmCategory> findSalesByFilmCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesByFilmCategories list by filter:", query);
        return salesByFilmCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SalesByFilmCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SalesByFilmCategory> filterSalesByFilmCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SalesByFilmCategories list by filter", query);
        return salesByFilmCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSalesByFilmCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return salesByFilmCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSalesByFilmCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SalesByFilmCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> salesByFilmCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SalesByFilmCategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSalesByFilmCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SalesByFilmCategories");
		return salesByFilmCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSalesByFilmCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return salesByFilmCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SalesByFilmCategoryService instance
	 */
	protected void setSalesByFilmCategoryService(SalesByFilmCategoryService service) {
		this.salesByFilmCategoryService = service;
	}

}