/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.actordb.FilmCategory;
import com.externalrepoproject.actordb.FilmCategoryId;
import com.externalrepoproject.actordb.service.FilmCategoryService;


/**
 * Controller object for domain model class FilmCategory.
 * @see FilmCategory
 */
@RestController("actordb.FilmCategoryController")
@Api(value = "FilmCategoryController", description = "Exposes APIs to work with FilmCategory resource.")
@RequestMapping("/actordb/FilmCategory")
public class FilmCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FilmCategoryController.class);

    @Autowired
	@Qualifier("actordb.FilmCategoryService")
	private FilmCategoryService filmCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FilmCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmCategory createFilmCategory(@RequestBody FilmCategory filmCategory) {
		LOGGER.debug("Create FilmCategory with information: {}" , filmCategory);

		filmCategory = filmCategoryService.create(filmCategory);
		LOGGER.debug("Created FilmCategory with information: {}" , filmCategory);

	    return filmCategory;
	}

    @ApiOperation(value = "Returns the FilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmCategory getFilmCategory(@RequestParam("categoryId") Short categoryId, @RequestParam("filmId") Short filmId) {

        FilmCategoryId filmcategoryId = new FilmCategoryId();
        filmcategoryId.setCategoryId(categoryId);
        filmcategoryId.setFilmId(filmId);

        LOGGER.debug("Getting FilmCategory with id: {}" , filmcategoryId);
        FilmCategory filmCategory = filmCategoryService.getById(filmcategoryId);
        LOGGER.debug("FilmCategory details with id: {}" , filmCategory);

        return filmCategory;
    }



    @ApiOperation(value = "Updates the FilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FilmCategory editFilmCategory(@RequestParam("categoryId") Short categoryId, @RequestParam("filmId") Short filmId, @RequestBody FilmCategory filmCategory) {

        filmCategory.setCategoryId(categoryId);
        filmCategory.setFilmId(filmId);

        LOGGER.debug("FilmCategory details with id is updated with: {}" , filmCategory);

        return filmCategoryService.update(filmCategory);
    }


    @ApiOperation(value = "Deletes the FilmCategory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFilmCategory(@RequestParam("categoryId") Short categoryId, @RequestParam("filmId") Short filmId) {

        FilmCategoryId filmcategoryId = new FilmCategoryId();
        filmcategoryId.setCategoryId(categoryId);
        filmcategoryId.setFilmId(filmId);

        LOGGER.debug("Deleting FilmCategory with id: {}" , filmcategoryId);
        FilmCategory filmCategory = filmCategoryService.delete(filmcategoryId);

        return filmCategory != null;
    }


    /**
     * @deprecated Use {@link #findFilmCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FilmCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmCategory> searchFilmCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FilmCategories list by query filter:{}", (Object) queryFilters);
        return filmCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilmCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmCategory> findFilmCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilmCategories list by filter:", query);
        return filmCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FilmCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FilmCategory> filterFilmCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FilmCategories list by filter", query);
        return filmCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFilmCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return filmCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportFilmCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FilmCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> filmCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FilmCategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFilmCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FilmCategories");
		return filmCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFilmCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return filmCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FilmCategoryService instance
	 */
	protected void setFilmCategoryService(FilmCategoryService service) {
		this.filmCategoryService = service;
	}

}