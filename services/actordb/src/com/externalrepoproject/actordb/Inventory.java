/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Inventory generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`inventory`")
public class Inventory implements Serializable {

    private Integer inventoryId;
    private short filmId;
    private short storeId;
    private Timestamp lastUpdate;
    private Film film;
    private Store store;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`inventory_id`", nullable = false, scale = 0, precision = 7)
    public Integer getInventoryId() {
        return this.inventoryId;
    }

    public void setInventoryId(Integer inventoryId) {
        this.inventoryId = inventoryId;
    }

    @Column(name = "`film_id`", nullable = false, scale = 0, precision = 5)
    public short getFilmId() {
        return this.filmId;
    }

    public void setFilmId(short filmId) {
        this.filmId = filmId;
    }

    @Column(name = "`store_id`", nullable = false, scale = 0, precision = 3)
    public short getStoreId() {
        return this.storeId;
    }

    public void setStoreId(short storeId) {
        this.storeId = storeId;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`film_id`", referencedColumnName = "`film_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_inventory_film`"))
    @Fetch(FetchMode.JOIN)
    public Film getFilm() {
        return this.film;
    }

    public void setFilm(Film film) {
        if(film != null) {
            this.filmId = film.getFilmId();
        }

        this.film = film;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`store_id`", referencedColumnName = "`store_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_inventory_store`"))
    @Fetch(FetchMode.JOIN)
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        if(store != null) {
            this.storeId = store.getStoreId();
        }

        this.store = store;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Inventory)) return false;
        final Inventory inventory = (Inventory) o;
        return Objects.equals(getInventoryId(), inventory.getInventoryId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getInventoryId());
    }
}