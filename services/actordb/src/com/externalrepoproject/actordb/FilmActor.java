/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * FilmActor generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`film_actor`")
@IdClass(FilmActorId.class)
public class FilmActor implements Serializable {

    private Short actorId;
    private Short filmId;
    private Timestamp lastUpdate;
    private Film film;
    private Actor actor;

    @Id
    @Column(name = "`actor_id`", nullable = false, scale = 0, precision = 5)
    public Short getActorId() {
        return this.actorId;
    }

    public void setActorId(Short actorId) {
        this.actorId = actorId;
    }

    @Id
    @Column(name = "`film_id`", nullable = false, scale = 0, precision = 5)
    public Short getFilmId() {
        return this.filmId;
    }

    public void setFilmId(Short filmId) {
        this.filmId = filmId;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`film_id`", referencedColumnName = "`film_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_actor_film`"))
    @Fetch(FetchMode.JOIN)
    public Film getFilm() {
        return this.film;
    }

    public void setFilm(Film film) {
        if(film != null) {
            this.filmId = film.getFilmId();
        }

        this.film = film;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`actor_id`", referencedColumnName = "`actor_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_actor_actor`"))
    @Fetch(FetchMode.JOIN)
    public Actor getActor() {
        return this.actor;
    }

    public void setActor(Actor actor) {
        if(actor != null) {
            this.actorId = actor.getActorId();
        }

        this.actor = actor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof FilmActor)) return false;
        final FilmActor filmActor = (FilmActor) o;
        return Objects.equals(getActorId(), filmActor.getActorId()) &&
                Objects.equals(getFilmId(), filmActor.getFilmId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActorId(),
                getFilmId());
    }
}