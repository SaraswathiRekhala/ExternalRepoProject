/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * FilmCategory generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`film_category`")
@IdClass(FilmCategoryId.class)
public class FilmCategory implements Serializable {

    private Short categoryId;
    private Short filmId;
    private Timestamp lastUpdate;
    private Category category;
    private Film film;

    @Id
    @Column(name = "`category_id`", nullable = false, scale = 0, precision = 3)
    public Short getCategoryId() {
        return this.categoryId;
    }

    public void setCategoryId(Short categoryId) {
        this.categoryId = categoryId;
    }

    @Id
    @Column(name = "`film_id`", nullable = false, scale = 0, precision = 5)
    public Short getFilmId() {
        return this.filmId;
    }

    public void setFilmId(Short filmId) {
        this.filmId = filmId;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`category_id`", referencedColumnName = "`category_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_category_category`"))
    @Fetch(FetchMode.JOIN)
    public Category getCategory() {
        return this.category;
    }

    public void setCategory(Category category) {
        if(category != null) {
            this.categoryId = category.getCategoryId();
        }

        this.category = category;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`film_id`", referencedColumnName = "`film_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_category_film`"))
    @Fetch(FetchMode.JOIN)
    public Film getFilm() {
        return this.film;
    }

    public void setFilm(Film film) {
        if(film != null) {
            this.filmId = film.getFilmId();
        }

        this.film = film;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof FilmCategory)) return false;
        final FilmCategory filmCategory = (FilmCategory) o;
        return Objects.equals(getCategoryId(), filmCategory.getCategoryId()) &&
                Objects.equals(getFilmId(), filmCategory.getFilmId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCategoryId(),
                getFilmId());
    }
}