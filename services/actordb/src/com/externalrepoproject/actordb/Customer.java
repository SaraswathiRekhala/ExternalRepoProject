/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Customer generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`customer`")
public class Customer implements Serializable {

    private Short customerId;
    private short storeId;
    private String firstName;
    private String lastName;
    private String email;
    private short addressId;
    private boolean active = true;
    private LocalDateTime createDate;
    private Timestamp lastUpdate;
    private Address address;
    private Store store;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`customer_id`", nullable = false, scale = 0, precision = 5)
    public Short getCustomerId() {
        return this.customerId;
    }

    public void setCustomerId(Short customerId) {
        this.customerId = customerId;
    }

    @Column(name = "`store_id`", nullable = false, scale = 0, precision = 3)
    public short getStoreId() {
        return this.storeId;
    }

    public void setStoreId(short storeId) {
        this.storeId = storeId;
    }

    @Column(name = "`first_name`", nullable = false, length = 45)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`last_name`", nullable = false, length = 45)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "`email`", nullable = true, length = 50)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`address_id`", nullable = false, scale = 0, precision = 5)
    public short getAddressId() {
        return this.addressId;
    }

    public void setAddressId(short addressId) {
        this.addressId = addressId;
    }

    @Column(name = "`active`", nullable = false)
    public boolean isActive() {
        return this.active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    @Column(name = "`create_date`", nullable = false)
    public LocalDateTime getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`address_id`", referencedColumnName = "`address_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_customer_address`"))
    @Fetch(FetchMode.JOIN)
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        if(address != null) {
            this.addressId = address.getAddressId();
        }

        this.address = address;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`store_id`", referencedColumnName = "`store_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_customer_store`"))
    @Fetch(FetchMode.JOIN)
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        if(store != null) {
            this.storeId = store.getStoreId();
        }

        this.store = store;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Customer)) return false;
        final Customer customer = (Customer) o;
        return Objects.equals(getCustomerId(), customer.getCustomerId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCustomerId());
    }
}