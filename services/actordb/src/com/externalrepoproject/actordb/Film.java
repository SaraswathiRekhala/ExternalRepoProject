/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.actordb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Film generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`film`")
public class Film implements Serializable {

    private Short filmId;
    private String title;
    private String description;
    private Short releaseYear;
    private short languageId;
    private Short originalLanguageId;
    private short rentalDuration = 3;
    private float rentalRate = 4.99F;
    private Short length;
    private float replacementCost = 19.99F;
    private String rating = "G";
    private String specialFeatures;
    private Timestamp lastUpdate;
    private Language languageByOriginalLanguageId;
    private Language languageByLanguageId;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`film_id`", nullable = false, scale = 0, precision = 5)
    public Short getFilmId() {
        return this.filmId;
    }

    public void setFilmId(Short filmId) {
        this.filmId = filmId;
    }

    @Column(name = "`title`", nullable = false, length = 255)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Column(name = "`description`", nullable = true, length = 65535)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`release_year`", nullable = true, scale = 0, precision = 4)
    public Short getReleaseYear() {
        return this.releaseYear;
    }

    public void setReleaseYear(Short releaseYear) {
        this.releaseYear = releaseYear;
    }

    @Column(name = "`language_id`", nullable = false, scale = 0, precision = 3)
    public short getLanguageId() {
        return this.languageId;
    }

    public void setLanguageId(short languageId) {
        this.languageId = languageId;
    }

    @Column(name = "`original_language_id`", nullable = true, scale = 0, precision = 3)
    public Short getOriginalLanguageId() {
        return this.originalLanguageId;
    }

    public void setOriginalLanguageId(Short originalLanguageId) {
        this.originalLanguageId = originalLanguageId;
    }

    @Column(name = "`rental_duration`", nullable = false, scale = 0, precision = 3)
    public short getRentalDuration() {
        return this.rentalDuration;
    }

    public void setRentalDuration(short rentalDuration) {
        this.rentalDuration = rentalDuration;
    }

    @Column(name = "`rental_rate`", nullable = false, scale = 2, precision = 4)
    public float getRentalRate() {
        return this.rentalRate;
    }

    public void setRentalRate(float rentalRate) {
        this.rentalRate = rentalRate;
    }

    @Column(name = "`length`", nullable = true, scale = 0, precision = 5)
    public Short getLength() {
        return this.length;
    }

    public void setLength(Short length) {
        this.length = length;
    }

    @Column(name = "`replacement_cost`", nullable = false, scale = 2, precision = 5)
    public float getReplacementCost() {
        return this.replacementCost;
    }

    public void setReplacementCost(float replacementCost) {
        this.replacementCost = replacementCost;
    }

    @Column(name = "`rating`", nullable = true, length = 5)
    public String getRating() {
        return this.rating;
    }

    public void setRating(String rating) {
        this.rating = rating;
    }

    @Column(name = "`special_features`", nullable = true, length = 54)
    public String getSpecialFeatures() {
        return this.specialFeatures;
    }

    public void setSpecialFeatures(String specialFeatures) {
        this.specialFeatures = specialFeatures;
    }

    @Column(name = "`last_update`", nullable = false)
    public Timestamp getLastUpdate() {
        return this.lastUpdate;
    }

    public void setLastUpdate(Timestamp lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`original_language_id`", referencedColumnName = "`language_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_language_original`"))
    @Fetch(FetchMode.JOIN)
    public Language getLanguageByOriginalLanguageId() {
        return this.languageByOriginalLanguageId;
    }

    public void setLanguageByOriginalLanguageId(Language languageByOriginalLanguageId) {
        if(languageByOriginalLanguageId != null) {
            this.originalLanguageId = languageByOriginalLanguageId.getLanguageId();
        }

        this.languageByOriginalLanguageId = languageByOriginalLanguageId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`language_id`", referencedColumnName = "`language_id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_film_language`"))
    @Fetch(FetchMode.JOIN)
    public Language getLanguageByLanguageId() {
        return this.languageByLanguageId;
    }

    public void setLanguageByLanguageId(Language languageByLanguageId) {
        if(languageByLanguageId != null) {
            this.languageId = languageByLanguageId.getLanguageId();
        }

        this.languageByLanguageId = languageByLanguageId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Film)) return false;
        final Film film = (Film) o;
        return Objects.equals(getFilmId(), film.getFilmId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getFilmId());
    }
}