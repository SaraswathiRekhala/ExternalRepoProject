/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.SelfRelationTable;
import com.externalrepoproject.cascadedb.service.SelfRelationTableService;


/**
 * Controller object for domain model class SelfRelationTable.
 * @see SelfRelationTable
 */
@RestController("CascadeDB.SelfRelationTableController")
@Api(value = "SelfRelationTableController", description = "Exposes APIs to work with SelfRelationTable resource.")
@RequestMapping("/CascadeDB/SelfRelationTable")
public class SelfRelationTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SelfRelationTableController.class);

    @Autowired
	@Qualifier("CascadeDB.SelfRelationTableService")
	private SelfRelationTableService selfRelationTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SelfRelationTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelfRelationTable createSelfRelationTable(@RequestBody SelfRelationTable selfRelationTable) {
		LOGGER.debug("Create SelfRelationTable with information: {}" , selfRelationTable);

		selfRelationTable = selfRelationTableService.create(selfRelationTable);
		LOGGER.debug("Created SelfRelationTable with information: {}" , selfRelationTable);

	    return selfRelationTable;
	}

    @ApiOperation(value = "Returns the SelfRelationTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelfRelationTable getSelfRelationTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SelfRelationTable with id: {}" , id);

        SelfRelationTable foundSelfRelationTable = selfRelationTableService.getById(id);
        LOGGER.debug("SelfRelationTable details with id: {}" , foundSelfRelationTable);

        return foundSelfRelationTable;
    }

    @ApiOperation(value = "Updates the SelfRelationTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SelfRelationTable editSelfRelationTable(@PathVariable("id") Integer id, @RequestBody SelfRelationTable selfRelationTable) {
        LOGGER.debug("Editing SelfRelationTable with id: {}" , selfRelationTable.getPkId());

        selfRelationTable.setPkId(id);
        selfRelationTable = selfRelationTableService.update(selfRelationTable);
        LOGGER.debug("SelfRelationTable details with id: {}" , selfRelationTable);

        return selfRelationTable;
    }

    @ApiOperation(value = "Deletes the SelfRelationTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSelfRelationTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SelfRelationTable with id: {}" , id);

        SelfRelationTable deletedSelfRelationTable = selfRelationTableService.delete(id);

        return deletedSelfRelationTable != null;
    }

    /**
     * @deprecated Use {@link #findSelfRelationTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SelfRelationTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelfRelationTable> searchSelfRelationTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SelfRelationTables list by query filter:{}", (Object) queryFilters);
        return selfRelationTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SelfRelationTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelfRelationTable> findSelfRelationTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SelfRelationTables list by filter:", query);
        return selfRelationTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SelfRelationTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelfRelationTable> filterSelfRelationTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SelfRelationTables list by filter", query);
        return selfRelationTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSelfRelationTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return selfRelationTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSelfRelationTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SelfRelationTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> selfRelationTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SelfRelationTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSelfRelationTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SelfRelationTables");
		return selfRelationTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSelfRelationTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return selfRelationTableService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/selfRelationTablesForSrRefid", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the selfRelationTablesForSrRefid instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SelfRelationTable> findAssociatedSelfRelationTablesForSrRefid(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated selfRelationTablesForSrRefid");
        return selfRelationTableService.findAssociatedSelfRelationTablesForSrRefid(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SelfRelationTableService instance
	 */
	protected void setSelfRelationTableService(SelfRelationTableService service) {
		this.selfRelationTableService = service;
	}

}