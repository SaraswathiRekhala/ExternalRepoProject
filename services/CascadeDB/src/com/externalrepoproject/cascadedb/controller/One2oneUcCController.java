/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.One2oneUcC;
import com.externalrepoproject.cascadedb.service.One2oneUcCService;


/**
 * Controller object for domain model class One2oneUcC.
 * @see One2oneUcC
 */
@RestController("CascadeDB.One2oneUcCController")
@Api(value = "One2oneUcCController", description = "Exposes APIs to work with One2oneUcC resource.")
@RequestMapping("/CascadeDB/One2oneUcC")
public class One2oneUcCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneUcCController.class);

    @Autowired
	@Qualifier("CascadeDB.One2oneUcCService")
	private One2oneUcCService one2oneUcCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneUcC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcC createOne2oneUcC(@RequestBody One2oneUcC one2oneUcC) {
		LOGGER.debug("Create One2oneUcC with information: {}" , one2oneUcC);

		one2oneUcC = one2oneUcCService.create(one2oneUcC);
		LOGGER.debug("Created One2oneUcC with information: {}" , one2oneUcC);

	    return one2oneUcC;
	}

    @ApiOperation(value = "Returns the One2oneUcC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcC getOne2oneUcC(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting One2oneUcC with id: {}" , id);

        One2oneUcC foundOne2oneUcC = one2oneUcCService.getById(id);
        LOGGER.debug("One2oneUcC details with id: {}" , foundOne2oneUcC);

        return foundOne2oneUcC;
    }

    @ApiOperation(value = "Updates the One2oneUcC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcC editOne2oneUcC(@PathVariable("id") Integer id, @RequestBody One2oneUcC one2oneUcC) {
        LOGGER.debug("Editing One2oneUcC with id: {}" , one2oneUcC.getChildId());

        one2oneUcC.setChildId(id);
        one2oneUcC = one2oneUcCService.update(one2oneUcC);
        LOGGER.debug("One2oneUcC details with id: {}" , one2oneUcC);

        return one2oneUcC;
    }

    @ApiOperation(value = "Deletes the One2oneUcC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneUcC(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting One2oneUcC with id: {}" , id);

        One2oneUcC deletedOne2oneUcC = one2oneUcCService.delete(id);

        return deletedOne2oneUcC != null;
    }

    @RequestMapping(value = "/childColumn1/{childColumn1}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching One2oneUcC with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcC getByChildColumn1(@PathVariable("childColumn1") Integer childColumn1) {
        LOGGER.debug("Getting One2oneUcC with uniques key ChildColumn1");
        return one2oneUcCService.getByChildColumn1(childColumn1);
    }

    /**
     * @deprecated Use {@link #findOne2oneUcCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneUcC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcC> searchOne2oneUcCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneUcCs list by query filter:{}", (Object) queryFilters);
        return one2oneUcCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneUcC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcC> findOne2oneUcCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneUcCs list by filter:", query);
        return one2oneUcCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneUcC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcC> filterOne2oneUcCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneUcCs list by filter", query);
        return one2oneUcCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneUcCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneUcCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneUcCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneUcC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneUcCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneUcC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneUcCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneUcCs");
		return one2oneUcCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneUcCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneUcCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneUcCService instance
	 */
	protected void setOne2oneUcCService(One2oneUcCService service) {
		this.one2oneUcCService = service;
	}

}