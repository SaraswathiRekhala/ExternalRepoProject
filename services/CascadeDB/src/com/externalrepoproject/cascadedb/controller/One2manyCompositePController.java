/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.Many2oneCompositeC;
import com.externalrepoproject.cascadedb.One2manyCompositeP;
import com.externalrepoproject.cascadedb.One2manyCompositePId;
import com.externalrepoproject.cascadedb.service.One2manyCompositePService;


/**
 * Controller object for domain model class One2manyCompositeP.
 * @see One2manyCompositeP
 */
@RestController("CascadeDB.One2manyCompositePController")
@Api(value = "One2manyCompositePController", description = "Exposes APIs to work with One2manyCompositeP resource.")
@RequestMapping("/CascadeDB/One2manyCompositeP")
public class One2manyCompositePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2manyCompositePController.class);

    @Autowired
	@Qualifier("CascadeDB.One2manyCompositePService")
	private One2manyCompositePService one2manyCompositePService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2manyCompositeP instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2manyCompositeP createOne2manyCompositeP(@RequestBody One2manyCompositeP one2manyCompositeP) {
		LOGGER.debug("Create One2manyCompositeP with information: {}" , one2manyCompositeP);

		one2manyCompositeP = one2manyCompositePService.create(one2manyCompositeP);
		LOGGER.debug("Created One2manyCompositeP with information: {}" , one2manyCompositeP);

	    return one2manyCompositeP;
	}

    @ApiOperation(value = "Returns the One2manyCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2manyCompositeP getOne2manyCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2manyCompositePId one2manycompositepId = new One2manyCompositePId();
        one2manycompositepId.setParentStringId(parentStringId);
        one2manycompositepId.setParentIntId(parentIntId);

        LOGGER.debug("Getting One2manyCompositeP with id: {}" , one2manycompositepId);
        One2manyCompositeP one2manyCompositeP = one2manyCompositePService.getById(one2manycompositepId);
        LOGGER.debug("One2manyCompositeP details with id: {}" , one2manyCompositeP);

        return one2manyCompositeP;
    }



    @ApiOperation(value = "Updates the One2manyCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2manyCompositeP editOne2manyCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId, @RequestBody One2manyCompositeP one2manyCompositeP) {

        one2manyCompositeP.setParentStringId(parentStringId);
        one2manyCompositeP.setParentIntId(parentIntId);

        LOGGER.debug("One2manyCompositeP details with id is updated with: {}" , one2manyCompositeP);

        return one2manyCompositePService.update(one2manyCompositeP);
    }


    @ApiOperation(value = "Deletes the One2manyCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2manyCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2manyCompositePId one2manycompositepId = new One2manyCompositePId();
        one2manycompositepId.setParentStringId(parentStringId);
        one2manycompositepId.setParentIntId(parentIntId);

        LOGGER.debug("Deleting One2manyCompositeP with id: {}" , one2manycompositepId);
        One2manyCompositeP one2manyCompositeP = one2manyCompositePService.delete(one2manycompositepId);

        return one2manyCompositeP != null;
    }


    /**
     * @deprecated Use {@link #findOne2manyCompositePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2manyCompositeP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2manyCompositeP> searchOne2manyCompositePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2manyCompositePs list by query filter:{}", (Object) queryFilters);
        return one2manyCompositePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2manyCompositeP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2manyCompositeP> findOne2manyCompositePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2manyCompositePs list by filter:", query);
        return one2manyCompositePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2manyCompositeP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2manyCompositeP> filterOne2manyCompositePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2manyCompositePs list by filter", query);
        return one2manyCompositePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2manyCompositePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2manyCompositePService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2manyCompositePsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2manyCompositeP.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2manyCompositePService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2manyCompositeP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2manyCompositePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2manyCompositePs");
		return one2manyCompositePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2manyCompositePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2manyCompositePService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/many2oneCompositeCs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the many2oneCompositeCs instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompositeC> findAssociatedMany2oneCompositeCs(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId, Pageable pageable) {

        LOGGER.debug("Fetching all associated many2oneCompositeCs");
        return one2manyCompositePService.findAssociatedMany2oneCompositeCs(parentStringId, parentIntId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2manyCompositePService instance
	 */
	protected void setOne2manyCompositePService(One2manyCompositePService service) {
		this.one2manyCompositePService = service;
	}

}