/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.One2onePMultipleC;
import com.externalrepoproject.cascadedb.service.One2onePMultipleCService;


/**
 * Controller object for domain model class One2onePMultipleC.
 * @see One2onePMultipleC
 */
@RestController("CascadeDB.One2onePMultipleCController")
@Api(value = "One2onePMultipleCController", description = "Exposes APIs to work with One2onePMultipleC resource.")
@RequestMapping("/CascadeDB/One2onePMultipleC")
public class One2onePMultipleCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2onePMultipleCController.class);

    @Autowired
	@Qualifier("CascadeDB.One2onePMultipleCService")
	private One2onePMultipleCService one2onePMultipleCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2onePMultipleC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2onePMultipleC createOne2onePMultipleC(@RequestBody One2onePMultipleC one2onePmultipleC) {
		LOGGER.debug("Create One2onePMultipleC with information: {}" , one2onePmultipleC);

		one2onePmultipleC = one2onePMultipleCService.create(one2onePmultipleC);
		LOGGER.debug("Created One2onePMultipleC with information: {}" , one2onePmultipleC);

	    return one2onePmultipleC;
	}

    @ApiOperation(value = "Returns the One2onePMultipleC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2onePMultipleC getOne2onePMultipleC(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting One2onePMultipleC with id: {}" , id);

        One2onePMultipleC foundOne2onePMultipleC = one2onePMultipleCService.getById(id);
        LOGGER.debug("One2onePMultipleC details with id: {}" , foundOne2onePMultipleC);

        return foundOne2onePMultipleC;
    }

    @ApiOperation(value = "Updates the One2onePMultipleC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2onePMultipleC editOne2onePMultipleC(@PathVariable("id") Integer id, @RequestBody One2onePMultipleC one2onePmultipleC) {
        LOGGER.debug("Editing One2onePMultipleC with id: {}" , one2onePmultipleC.getParentId());

        one2onePmultipleC.setParentId(id);
        one2onePmultipleC = one2onePMultipleCService.update(one2onePmultipleC);
        LOGGER.debug("One2onePMultipleC details with id: {}" , one2onePmultipleC);

        return one2onePmultipleC;
    }

    @ApiOperation(value = "Deletes the One2onePMultipleC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2onePMultipleC(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting One2onePMultipleC with id: {}" , id);

        One2onePMultipleC deletedOne2onePMultipleC = one2onePMultipleCService.delete(id);

        return deletedOne2onePMultipleC != null;
    }

    /**
     * @deprecated Use {@link #findOne2onePMultipleCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2onePMultipleC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2onePMultipleC> searchOne2onePMultipleCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2onePMultipleCs list by query filter:{}", (Object) queryFilters);
        return one2onePMultipleCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2onePMultipleC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2onePMultipleC> findOne2onePMultipleCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2onePMultipleCs list by filter:", query);
        return one2onePMultipleCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2onePMultipleC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2onePMultipleC> filterOne2onePMultipleCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2onePMultipleCs list by filter", query);
        return one2onePMultipleCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2onePMultipleCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2onePMultipleCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2onePMultipleCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2onePMultipleC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2onePMultipleCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2onePMultipleC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2onePMultipleCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2onePMultipleCs");
		return one2onePMultipleCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2onePMultipleCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2onePMultipleCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2onePMultipleCService instance
	 */
	protected void setOne2onePMultipleCService(One2onePMultipleCService service) {
		this.one2onePMultipleCService = service;
	}

}