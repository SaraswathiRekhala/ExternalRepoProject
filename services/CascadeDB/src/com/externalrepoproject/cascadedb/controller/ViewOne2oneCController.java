/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.ViewOne2oneC;
import com.externalrepoproject.cascadedb.ViewOne2oneCId;
import com.externalrepoproject.cascadedb.service.ViewOne2oneCService;


/**
 * Controller object for domain model class ViewOne2oneC.
 * @see ViewOne2oneC
 */
@RestController("CascadeDB.ViewOne2oneCController")
@Api(value = "ViewOne2oneCController", description = "Exposes APIs to work with ViewOne2oneC resource.")
@RequestMapping("/CascadeDB/ViewOne2oneC")
public class ViewOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewOne2oneCController.class);

    @Autowired
	@Qualifier("CascadeDB.ViewOne2oneCService")
	private ViewOne2oneCService viewOne2oneCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ViewOne2oneC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewOne2oneC createViewOne2oneC(@RequestBody ViewOne2oneC viewOne2oneC) {
		LOGGER.debug("Create ViewOne2oneC with information: {}" , viewOne2oneC);

		viewOne2oneC = viewOne2oneCService.create(viewOne2oneC);
		LOGGER.debug("Created ViewOne2oneC with information: {}" , viewOne2oneC);

	    return viewOne2oneC;
	}

    @ApiOperation(value = "Returns the ViewOne2oneC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewOne2oneC getViewOne2oneC(@RequestParam("childId") Integer childId, @RequestParam("childColumn1") String childColumn1, @RequestParam("childColumn2") String childColumn2) {

        ViewOne2oneCId viewone2onecId = new ViewOne2oneCId();
        viewone2onecId.setChildId(childId);
        viewone2onecId.setChildColumn1(childColumn1);
        viewone2onecId.setChildColumn2(childColumn2);

        LOGGER.debug("Getting ViewOne2oneC with id: {}" , viewone2onecId);
        ViewOne2oneC viewOne2oneC = viewOne2oneCService.getById(viewone2onecId);
        LOGGER.debug("ViewOne2oneC details with id: {}" , viewOne2oneC);

        return viewOne2oneC;
    }



    @ApiOperation(value = "Updates the ViewOne2oneC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewOne2oneC editViewOne2oneC(@RequestParam("childId") Integer childId, @RequestParam("childColumn1") String childColumn1, @RequestParam("childColumn2") String childColumn2, @RequestBody ViewOne2oneC viewOne2oneC) {

        viewOne2oneC.setChildId(childId);
        viewOne2oneC.setChildColumn1(childColumn1);
        viewOne2oneC.setChildColumn2(childColumn2);

        LOGGER.debug("ViewOne2oneC details with id is updated with: {}" , viewOne2oneC);

        return viewOne2oneCService.update(viewOne2oneC);
    }


    @ApiOperation(value = "Deletes the ViewOne2oneC instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteViewOne2oneC(@RequestParam("childId") Integer childId, @RequestParam("childColumn1") String childColumn1, @RequestParam("childColumn2") String childColumn2) {

        ViewOne2oneCId viewone2onecId = new ViewOne2oneCId();
        viewone2onecId.setChildId(childId);
        viewone2onecId.setChildColumn1(childColumn1);
        viewone2onecId.setChildColumn2(childColumn2);

        LOGGER.debug("Deleting ViewOne2oneC with id: {}" , viewone2onecId);
        ViewOne2oneC viewOne2oneC = viewOne2oneCService.delete(viewone2onecId);

        return viewOne2oneC != null;
    }


    /**
     * @deprecated Use {@link #findViewOne2oneCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ViewOne2oneC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewOne2oneC> searchViewOne2oneCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ViewOne2oneCs list by query filter:{}", (Object) queryFilters);
        return viewOne2oneCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewOne2oneC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewOne2oneC> findViewOne2oneCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewOne2oneCs list by filter:", query);
        return viewOne2oneCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewOne2oneC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewOne2oneC> filterViewOne2oneCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewOne2oneCs list by filter", query);
        return viewOne2oneCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportViewOne2oneCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return viewOne2oneCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportViewOne2oneCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ViewOne2oneC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> viewOne2oneCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ViewOne2oneC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countViewOne2oneCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ViewOne2oneCs");
		return viewOne2oneCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getViewOne2oneCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return viewOne2oneCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViewOne2oneCService instance
	 */
	protected void setViewOne2oneCService(ViewOne2oneCService service) {
		this.viewOne2oneCService = service;
	}

}