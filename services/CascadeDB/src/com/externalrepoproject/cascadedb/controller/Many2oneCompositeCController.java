/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.Many2oneCompositeC;
import com.externalrepoproject.cascadedb.service.Many2oneCompositeCService;


/**
 * Controller object for domain model class Many2oneCompositeC.
 * @see Many2oneCompositeC
 */
@RestController("CascadeDB.Many2oneCompositeCController")
@Api(value = "Many2oneCompositeCController", description = "Exposes APIs to work with Many2oneCompositeC resource.")
@RequestMapping("/CascadeDB/Many2oneCompositeC")
public class Many2oneCompositeCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompositeCController.class);

    @Autowired
	@Qualifier("CascadeDB.Many2oneCompositeCService")
	private Many2oneCompositeCService many2oneCompositeCService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneCompositeC instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompositeC createMany2oneCompositeC(@RequestBody Many2oneCompositeC many2oneCompositeC) {
		LOGGER.debug("Create Many2oneCompositeC with information: {}" , many2oneCompositeC);

		many2oneCompositeC = many2oneCompositeCService.create(many2oneCompositeC);
		LOGGER.debug("Created Many2oneCompositeC with information: {}" , many2oneCompositeC);

	    return many2oneCompositeC;
	}

    @ApiOperation(value = "Returns the Many2oneCompositeC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompositeC getMany2oneCompositeC(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Many2oneCompositeC with id: {}" , id);

        Many2oneCompositeC foundMany2oneCompositeC = many2oneCompositeCService.getById(id);
        LOGGER.debug("Many2oneCompositeC details with id: {}" , foundMany2oneCompositeC);

        return foundMany2oneCompositeC;
    }

    @ApiOperation(value = "Updates the Many2oneCompositeC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompositeC editMany2oneCompositeC(@PathVariable("id") Integer id, @RequestBody Many2oneCompositeC many2oneCompositeC) {
        LOGGER.debug("Editing Many2oneCompositeC with id: {}" , many2oneCompositeC.getChildId());

        many2oneCompositeC.setChildId(id);
        many2oneCompositeC = many2oneCompositeCService.update(many2oneCompositeC);
        LOGGER.debug("Many2oneCompositeC details with id: {}" , many2oneCompositeC);

        return many2oneCompositeC;
    }

    @ApiOperation(value = "Deletes the Many2oneCompositeC instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompositeC(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Many2oneCompositeC with id: {}" , id);

        Many2oneCompositeC deletedMany2oneCompositeC = many2oneCompositeCService.delete(id);

        return deletedMany2oneCompositeC != null;
    }

    /**
     * @deprecated Use {@link #findMany2oneCompositeCs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompositeC instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompositeC> searchMany2oneCompositeCsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompositeCs list by query filter:{}", (Object) queryFilters);
        return many2oneCompositeCService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompositeC instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompositeC> findMany2oneCompositeCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompositeCs list by filter:", query);
        return many2oneCompositeCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompositeC instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompositeC> filterMany2oneCompositeCs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompositeCs list by filter", query);
        return many2oneCompositeCService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompositeCs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompositeCService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2oneCompositeCsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneCompositeC.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2oneCompositeCService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompositeC instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompositeCs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompositeCs");
		return many2oneCompositeCService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompositeCAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompositeCService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompositeCService instance
	 */
	protected void setMany2oneCompositeCService(Many2oneCompositeCService service) {
		this.many2oneCompositeCService = service;
	}

}