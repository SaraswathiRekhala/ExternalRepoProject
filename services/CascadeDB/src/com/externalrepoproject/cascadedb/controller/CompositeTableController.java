/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.CompositeTable;
import com.externalrepoproject.cascadedb.CompositeTableId;
import com.externalrepoproject.cascadedb.service.CompositeTableService;


/**
 * Controller object for domain model class CompositeTable.
 * @see CompositeTable
 */
@RestController("CascadeDB.CompositeTableController")
@Api(value = "CompositeTableController", description = "Exposes APIs to work with CompositeTable resource.")
@RequestMapping("/CascadeDB/CompositeTable")
public class CompositeTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeTableController.class);

    @Autowired
	@Qualifier("CascadeDB.CompositeTableService")
	private CompositeTableService compositeTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompositeTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeTable createCompositeTable(@RequestBody CompositeTable compositeTable) {
		LOGGER.debug("Create CompositeTable with information: {}" , compositeTable);

		compositeTable = compositeTableService.create(compositeTable);
		LOGGER.debug("Created CompositeTable with information: {}" , compositeTable);

	    return compositeTable;
	}

    @ApiOperation(value = "Returns the CompositeTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeTable getCompositeTable(@RequestParam("stringCol") String stringCol, @RequestParam("charId") String charId, @RequestParam("intId") Integer intId) {

        CompositeTableId compositetableId = new CompositeTableId();
        compositetableId.setStringCol(stringCol);
        compositetableId.setCharId(charId);
        compositetableId.setIntId(intId);

        LOGGER.debug("Getting CompositeTable with id: {}" , compositetableId);
        CompositeTable compositeTable = compositeTableService.getById(compositetableId);
        LOGGER.debug("CompositeTable details with id: {}" , compositeTable);

        return compositeTable;
    }



    @ApiOperation(value = "Updates the CompositeTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeTable editCompositeTable(@RequestParam("stringCol") String stringCol, @RequestParam("charId") String charId, @RequestParam("intId") Integer intId, @RequestBody CompositeTable compositeTable) {

        compositeTable.setStringCol(stringCol);
        compositeTable.setCharId(charId);
        compositeTable.setIntId(intId);

        LOGGER.debug("CompositeTable details with id is updated with: {}" , compositeTable);

        return compositeTableService.update(compositeTable);
    }


    @ApiOperation(value = "Deletes the CompositeTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompositeTable(@RequestParam("stringCol") String stringCol, @RequestParam("charId") String charId, @RequestParam("intId") Integer intId) {

        CompositeTableId compositetableId = new CompositeTableId();
        compositetableId.setStringCol(stringCol);
        compositetableId.setCharId(charId);
        compositetableId.setIntId(intId);

        LOGGER.debug("Deleting CompositeTable with id: {}" , compositetableId);
        CompositeTable compositeTable = compositeTableService.delete(compositetableId);

        return compositeTable != null;
    }


    /**
     * @deprecated Use {@link #findCompositeTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompositeTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeTable> searchCompositeTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompositeTables list by query filter:{}", (Object) queryFilters);
        return compositeTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeTable> findCompositeTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeTables list by filter:", query);
        return compositeTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeTable> filterCompositeTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeTables list by filter", query);
        return compositeTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompositeTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compositeTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompositeTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompositeTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compositeTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompositeTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompositeTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompositeTables");
		return compositeTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompositeTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compositeTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompositeTableService instance
	 */
	protected void setCompositeTableService(CompositeTableService service) {
		this.compositeTableService = service;
	}

}