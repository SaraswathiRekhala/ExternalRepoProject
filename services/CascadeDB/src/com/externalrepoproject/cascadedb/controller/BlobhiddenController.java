/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.Blobhidden;
import com.externalrepoproject.cascadedb.service.BlobhiddenService;


/**
 * Controller object for domain model class Blobhidden.
 * @see Blobhidden
 */
@RestController("CascadeDB.BlobhiddenController")
@Api(value = "BlobhiddenController", description = "Exposes APIs to work with Blobhidden resource.")
@RequestMapping("/CascadeDB/Blobhidden")
public class BlobhiddenController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobhiddenController.class);

    @Autowired
	@Qualifier("CascadeDB.BlobhiddenService")
	private BlobhiddenService blobhiddenService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Blobhidden instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobhidden createBlobhidden(@RequestPart("wm_data_json") Blobhidden blobhidden, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Blobhidden with information: {}" , blobhidden);

    blobhidden.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		blobhidden = blobhiddenService.create(blobhidden);
		LOGGER.debug("Created Blobhidden with information: {}" , blobhidden);

	    return blobhidden;
	}

    @ApiOperation(value = "Returns the Blobhidden instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobhidden getBlobhidden(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Blobhidden with id: {}" , id);

        Blobhidden foundBlobhidden = blobhiddenService.getById(id);
        LOGGER.debug("Blobhidden details with id: {}" , foundBlobhidden);

        return foundBlobhidden;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Blobhidden instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getBlobhiddenBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Blobhidden instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Blobhidden.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Blobhidden blobhidden = blobhiddenService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(blobhidden, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Blobhidden instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobhidden editBlobhidden(@PathVariable("id") Integer id, @RequestBody Blobhidden blobhidden) {
        LOGGER.debug("Editing Blobhidden with id: {}" , blobhidden.getId());

        blobhidden.setId(id);
        blobhidden = blobhiddenService.update(blobhidden);
        LOGGER.debug("Blobhidden details with id: {}" , blobhidden);

        return blobhidden;
    }

    @ApiOperation(value = "Updates the Blobhidden instance associated with the given id.This API should be used when Blobhidden instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Blobhidden editBlobhidden(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Blobhidden newBlobhidden = WMMultipartUtils.toObject(multipartHttpServletRequest, Blobhidden.class, "CascadeDB");
        newBlobhidden.setId(id);

        Blobhidden oldBlobhidden = blobhiddenService.getById(id);
        WMMultipartUtils.updateLobsContent(oldBlobhidden, newBlobhidden);
        LOGGER.debug("Updating Blobhidden with information: {}" , newBlobhidden);

        return blobhiddenService.update(newBlobhidden);
    }

    @ApiOperation(value = "Deletes the Blobhidden instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBlobhidden(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Blobhidden with id: {}" , id);

        Blobhidden deletedBlobhidden = blobhiddenService.delete(id);

        return deletedBlobhidden != null;
    }

    /**
     * @deprecated Use {@link #findBlobhiddens(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Blobhidden instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobhidden> searchBlobhiddensByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Blobhiddens list by query filter:{}", (Object) queryFilters);
        return blobhiddenService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Blobhidden instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobhidden> findBlobhiddens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Blobhiddens list by filter:", query);
        return blobhiddenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Blobhidden instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Blobhidden> filterBlobhiddens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Blobhiddens list by filter", query);
        return blobhiddenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBlobhiddens(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return blobhiddenService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBlobhiddensAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Blobhidden.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> blobhiddenService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Blobhidden instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBlobhiddens( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Blobhiddens");
		return blobhiddenService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBlobhiddenAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return blobhiddenService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BlobhiddenService instance
	 */
	protected void setBlobhiddenService(BlobhiddenService service) {
		this.blobhiddenService = service;
	}

}