/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.One2oneCompositeP;
import com.externalrepoproject.cascadedb.One2oneCompositePId;
import com.externalrepoproject.cascadedb.service.One2oneCompositePService;


/**
 * Controller object for domain model class One2oneCompositeP.
 * @see One2oneCompositeP
 */
@RestController("CascadeDB.One2oneCompositePController")
@Api(value = "One2oneCompositePController", description = "Exposes APIs to work with One2oneCompositeP resource.")
@RequestMapping("/CascadeDB/One2oneCompositeP")
public class One2oneCompositePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompositePController.class);

    @Autowired
	@Qualifier("CascadeDB.One2oneCompositePService")
	private One2oneCompositePService one2oneCompositePService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneCompositeP instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompositeP createOne2oneCompositeP(@RequestBody One2oneCompositeP one2oneCompositeP) {
		LOGGER.debug("Create One2oneCompositeP with information: {}" , one2oneCompositeP);

		one2oneCompositeP = one2oneCompositePService.create(one2oneCompositeP);
		LOGGER.debug("Created One2oneCompositeP with information: {}" , one2oneCompositeP);

	    return one2oneCompositeP;
	}

    @ApiOperation(value = "Returns the One2oneCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompositeP getOne2oneCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2oneCompositePId one2onecompositepId = new One2oneCompositePId();
        one2onecompositepId.setParentStringId(parentStringId);
        one2onecompositepId.setParentIntId(parentIntId);

        LOGGER.debug("Getting One2oneCompositeP with id: {}" , one2onecompositepId);
        One2oneCompositeP one2oneCompositeP = one2oneCompositePService.getById(one2onecompositepId);
        LOGGER.debug("One2oneCompositeP details with id: {}" , one2oneCompositeP);

        return one2oneCompositeP;
    }



    @ApiOperation(value = "Updates the One2oneCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompositeP editOne2oneCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId, @RequestBody One2oneCompositeP one2oneCompositeP) {

        one2oneCompositeP.setParentStringId(parentStringId);
        one2oneCompositeP.setParentIntId(parentIntId);

        LOGGER.debug("One2oneCompositeP details with id is updated with: {}" , one2oneCompositeP);

        return one2oneCompositePService.update(one2oneCompositeP);
    }


    @ApiOperation(value = "Deletes the One2oneCompositeP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneCompositeP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2oneCompositePId one2onecompositepId = new One2oneCompositePId();
        one2onecompositepId.setParentStringId(parentStringId);
        one2onecompositepId.setParentIntId(parentIntId);

        LOGGER.debug("Deleting One2oneCompositeP with id: {}" , one2onecompositepId);
        One2oneCompositeP one2oneCompositeP = one2oneCompositePService.delete(one2onecompositepId);

        return one2oneCompositeP != null;
    }


    /**
     * @deprecated Use {@link #findOne2oneCompositePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneCompositeP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompositeP> searchOne2oneCompositePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneCompositePs list by query filter:{}", (Object) queryFilters);
        return one2oneCompositePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompositeP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompositeP> findOne2oneCompositePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompositePs list by filter:", query);
        return one2oneCompositePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompositeP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompositeP> filterOne2oneCompositePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompositePs list by filter", query);
        return one2oneCompositePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneCompositePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneCompositePService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneCompositePsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneCompositeP.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneCompositePService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneCompositeP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneCompositePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneCompositePs");
		return one2oneCompositePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneCompositePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneCompositePService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneCompositePService instance
	 */
	protected void setOne2oneCompositePService(One2oneCompositePService service) {
		this.one2oneCompositePService = service;
	}

}