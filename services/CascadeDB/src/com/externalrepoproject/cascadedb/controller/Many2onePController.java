/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.Many2oneC1;
import com.externalrepoproject.cascadedb.Many2oneP;
import com.externalrepoproject.cascadedb.service.Many2onePService;


/**
 * Controller object for domain model class Many2oneP.
 * @see Many2oneP
 */
@RestController("CascadeDB.Many2onePController")
@Api(value = "Many2onePController", description = "Exposes APIs to work with Many2oneP resource.")
@RequestMapping("/CascadeDB/Many2oneP")
public class Many2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2onePController.class);

    @Autowired
	@Qualifier("CascadeDB.Many2onePService")
	private Many2onePService many2onePService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Many2oneP instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneP createMany2oneP(@RequestBody Many2oneP many2oneP) {
		LOGGER.debug("Create Many2oneP with information: {}" , many2oneP);

		many2oneP = many2onePService.create(many2oneP);
		LOGGER.debug("Created Many2oneP with information: {}" , many2oneP);

	    return many2oneP;
	}

    @ApiOperation(value = "Returns the Many2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneP getMany2oneP(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Many2oneP with id: {}" , id);

        Many2oneP foundMany2oneP = many2onePService.getById(id);
        LOGGER.debug("Many2oneP details with id: {}" , foundMany2oneP);

        return foundMany2oneP;
    }

    @ApiOperation(value = "Updates the Many2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneP editMany2oneP(@PathVariable("id") Integer id, @RequestBody Many2oneP many2oneP) {
        LOGGER.debug("Editing Many2oneP with id: {}" , many2oneP.getParentId());

        many2oneP.setParentId(id);
        many2oneP = many2onePService.update(many2oneP);
        LOGGER.debug("Many2oneP details with id: {}" , many2oneP);

        return many2oneP;
    }

    @ApiOperation(value = "Deletes the Many2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneP(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Many2oneP with id: {}" , id);

        Many2oneP deletedMany2oneP = many2onePService.delete(id);

        return deletedMany2oneP != null;
    }

    /**
     * @deprecated Use {@link #findMany2onePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneP> searchMany2onePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2onePs list by query filter:{}", (Object) queryFilters);
        return many2onePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneP> findMany2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2onePs list by filter:", query);
        return many2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneP> filterMany2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2onePs list by filter", query);
        return many2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2onePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2onePService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportMany2onePsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Many2oneP.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> many2onePService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Many2oneP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2onePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2onePs");
		return many2onePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2onePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2onePService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/many2oneC1s", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the many2oneC1s instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneC1> findAssociatedMany2oneC1s(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated many2oneC1s");
        return many2onePService.findAssociatedMany2oneC1s(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2onePService instance
	 */
	protected void setMany2onePService(Many2onePService service) {
		this.many2onePService = service;
	}

}