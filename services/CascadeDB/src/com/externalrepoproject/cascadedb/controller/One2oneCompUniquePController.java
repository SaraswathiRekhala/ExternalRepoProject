/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.externalrepoproject.cascadedb.One2oneCompUniqueP;
import com.externalrepoproject.cascadedb.One2oneCompUniquePId;
import com.externalrepoproject.cascadedb.service.One2oneCompUniquePService;


/**
 * Controller object for domain model class One2oneCompUniqueP.
 * @see One2oneCompUniqueP
 */
@RestController("CascadeDB.One2oneCompUniquePController")
@Api(value = "One2oneCompUniquePController", description = "Exposes APIs to work with One2oneCompUniqueP resource.")
@RequestMapping("/CascadeDB/One2oneCompUniqueP")
public class One2oneCompUniquePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompUniquePController.class);

    @Autowired
	@Qualifier("CascadeDB.One2oneCompUniquePService")
	private One2oneCompUniquePService one2oneCompUniquePService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new One2oneCompUniqueP instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompUniqueP createOne2oneCompUniqueP(@RequestBody One2oneCompUniqueP one2oneCompUniqueP) {
		LOGGER.debug("Create One2oneCompUniqueP with information: {}" , one2oneCompUniqueP);

		one2oneCompUniqueP = one2oneCompUniquePService.create(one2oneCompUniqueP);
		LOGGER.debug("Created One2oneCompUniqueP with information: {}" , one2oneCompUniqueP);

	    return one2oneCompUniqueP;
	}

    @ApiOperation(value = "Returns the One2oneCompUniqueP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompUniqueP getOne2oneCompUniqueP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2oneCompUniquePId one2onecompuniquepId = new One2oneCompUniquePId();
        one2onecompuniquepId.setParentStringId(parentStringId);
        one2onecompuniquepId.setParentIntId(parentIntId);

        LOGGER.debug("Getting One2oneCompUniqueP with id: {}" , one2onecompuniquepId);
        One2oneCompUniqueP one2oneCompUniqueP = one2oneCompUniquePService.getById(one2onecompuniquepId);
        LOGGER.debug("One2oneCompUniqueP details with id: {}" , one2oneCompUniqueP);

        return one2oneCompUniqueP;
    }



    @ApiOperation(value = "Updates the One2oneCompUniqueP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneCompUniqueP editOne2oneCompUniqueP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId, @RequestBody One2oneCompUniqueP one2oneCompUniqueP) {

        one2oneCompUniqueP.setParentStringId(parentStringId);
        one2oneCompUniqueP.setParentIntId(parentIntId);

        LOGGER.debug("One2oneCompUniqueP details with id is updated with: {}" , one2oneCompUniqueP);

        return one2oneCompUniquePService.update(one2oneCompUniqueP);
    }


    @ApiOperation(value = "Deletes the One2oneCompUniqueP instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneCompUniqueP(@RequestParam("parentStringId") String parentStringId, @RequestParam("parentIntId") Integer parentIntId) {

        One2oneCompUniquePId one2onecompuniquepId = new One2oneCompUniquePId();
        one2onecompuniquepId.setParentStringId(parentStringId);
        one2onecompuniquepId.setParentIntId(parentIntId);

        LOGGER.debug("Deleting One2oneCompUniqueP with id: {}" , one2onecompuniquepId);
        One2oneCompUniqueP one2oneCompUniqueP = one2oneCompUniquePService.delete(one2onecompuniquepId);

        return one2oneCompUniqueP != null;
    }


    /**
     * @deprecated Use {@link #findOne2oneCompUniquePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneCompUniqueP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompUniqueP> searchOne2oneCompUniquePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneCompUniquePs list by query filter:{}", (Object) queryFilters);
        return one2oneCompUniquePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompUniqueP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompUniqueP> findOne2oneCompUniquePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompUniquePs list by filter:", query);
        return one2oneCompUniquePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneCompUniqueP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneCompUniqueP> filterOne2oneCompUniquePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneCompUniquePs list by filter", query);
        return one2oneCompUniquePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneCompUniquePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneCompUniquePService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOne2oneCompUniquePsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = One2oneCompUniqueP.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> one2oneCompUniquePService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of One2oneCompUniqueP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneCompUniquePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneCompUniquePs");
		return one2oneCompUniquePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneCompUniquePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneCompUniquePService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneCompUniquePService instance
	 */
	protected void setOne2oneCompUniquePService(One2oneCompUniquePService service) {
		this.one2oneCompUniquePService = service;
	}

}