/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneCompUniqueC;


/**
 * ServiceImpl object for domain model class One2oneCompUniqueC.
 *
 * @see One2oneCompUniqueC
 */
@Service("CascadeDB.One2oneCompUniqueCService")
@Validated
public class One2oneCompUniqueCServiceImpl implements One2oneCompUniqueCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompUniqueCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2oneCompUniqueCDao")
    private WMGenericDao<One2oneCompUniqueC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneCompUniqueC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC create(One2oneCompUniqueC one2oneCompUniqueC) {
        LOGGER.debug("Creating a new One2oneCompUniqueC with information: {}", one2oneCompUniqueC);

        One2oneCompUniqueC one2oneCompUniqueCCreated = this.wmGenericDao.create(one2oneCompUniqueC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneCompUniqueCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC getById(Integer one2onecompuniquecId) {
        LOGGER.debug("Finding One2oneCompUniqueC by id: {}", one2onecompuniquecId);
        return this.wmGenericDao.findById(one2onecompuniquecId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC findById(Integer one2onecompuniquecId) {
        LOGGER.debug("Finding One2oneCompUniqueC by id: {}", one2onecompuniquecId);
        try {
            return this.wmGenericDao.findById(one2onecompuniquecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneCompUniqueC found with id: {}", one2onecompuniquecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2oneCompUniqueC> findByMultipleIds(List<Integer> one2onecompuniquecIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneCompUniqueCs by ids: {}", one2onecompuniquecIds);

        return this.wmGenericDao.findByMultipleIds(one2onecompuniquecIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC getByChildIntIdAndChildStringId(Integer childIntId, String childStringId) {
        Map<String, Object> childIntIdAndChildStringIdMap = new HashMap<>();
        childIntIdAndChildStringIdMap.put("childIntId", childIntId);
        childIntIdAndChildStringIdMap.put("childStringId", childStringId);

        LOGGER.debug("Finding One2oneCompUniqueC by unique keys: {}", childIntIdAndChildStringIdMap);
        return this.wmGenericDao.findByUniqueKey(childIntIdAndChildStringIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC update(One2oneCompUniqueC one2oneCompUniqueC) {
        LOGGER.debug("Updating One2oneCompUniqueC with information: {}", one2oneCompUniqueC);

        this.wmGenericDao.update(one2oneCompUniqueC);
        this.wmGenericDao.refresh(one2oneCompUniqueC);

        return one2oneCompUniqueC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompUniqueC delete(Integer one2onecompuniquecId) {
        LOGGER.debug("Deleting One2oneCompUniqueC with id: {}", one2onecompuniquecId);
        One2oneCompUniqueC deleted = this.wmGenericDao.findById(one2onecompuniquecId);
        if (deleted == null) {
            LOGGER.debug("No One2oneCompUniqueC found with id: {}", one2onecompuniquecId);
            throw new EntityNotFoundException(String.valueOf(one2onecompuniquecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2oneCompUniqueC one2oneCompUniqueC) {
        LOGGER.debug("Deleting One2oneCompUniqueC with {}", one2oneCompUniqueC);
        this.wmGenericDao.delete(one2oneCompUniqueC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompUniqueC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompUniqueCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompUniqueC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompUniqueCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompUniqueC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompUniqueC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}