/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Many2oneCompositeC;

/**
 * Service object for domain model class {@link Many2oneCompositeC}.
 */
public interface Many2oneCompositeCService {

    /**
     * Creates a new Many2oneCompositeC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneCompositeC if any.
     *
     * @param many2oneCompositeC Details of the Many2oneCompositeC to be created; value cannot be null.
     * @return The newly created Many2oneCompositeC.
     */
    Many2oneCompositeC create(@Valid Many2oneCompositeC many2oneCompositeC);


	/**
     * Returns Many2oneCompositeC by given id if exists.
     *
     * @param many2onecompositecId The id of the Many2oneCompositeC to get; value cannot be null.
     * @return Many2oneCompositeC associated with the given many2onecompositecId.
	 * @throws EntityNotFoundException If no Many2oneCompositeC is found.
     */
    Many2oneCompositeC getById(Integer many2onecompositecId);

    /**
     * Find and return the Many2oneCompositeC by given id if exists, returns null otherwise.
     *
     * @param many2onecompositecId The id of the Many2oneCompositeC to get; value cannot be null.
     * @return Many2oneCompositeC associated with the given many2onecompositecId.
     */
    Many2oneCompositeC findById(Integer many2onecompositecId);

	/**
     * Find and return the list of Many2oneCompositeCs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param many2onecompositecIds The id's of the Many2oneCompositeC to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Many2oneCompositeCs associated with the given many2onecompositecIds.
     */
    List<Many2oneCompositeC> findByMultipleIds(List<Integer> many2onecompositecIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Many2oneCompositeC. It replaces all fields of the existing Many2oneCompositeC with the given many2oneCompositeC.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneCompositeC if any.
     *
     * @param many2oneCompositeC The details of the Many2oneCompositeC to be updated; value cannot be null.
     * @return The updated Many2oneCompositeC.
     * @throws EntityNotFoundException if no Many2oneCompositeC is found with given input.
     */
    Many2oneCompositeC update(@Valid Many2oneCompositeC many2oneCompositeC);

    /**
     * Deletes an existing Many2oneCompositeC with the given id.
     *
     * @param many2onecompositecId The id of the Many2oneCompositeC to be deleted; value cannot be null.
     * @return The deleted Many2oneCompositeC.
     * @throws EntityNotFoundException if no Many2oneCompositeC found with the given id.
     */
    Many2oneCompositeC delete(Integer many2onecompositecId);

    /**
     * Deletes an existing Many2oneCompositeC with the given object.
     *
     * @param many2oneCompositeC The instance of the Many2oneCompositeC to be deleted; value cannot be null.
     */
    void delete(Many2oneCompositeC many2oneCompositeC);

    /**
     * Find all Many2oneCompositeCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCompositeCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Many2oneCompositeC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Many2oneCompositeCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneCompositeCs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneCompositeC> findAll(String query, Pageable pageable);

    /**
     * Exports all Many2oneCompositeCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Many2oneCompositeCs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Many2oneCompositeCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Many2oneCompositeC.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}