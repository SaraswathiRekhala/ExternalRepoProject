/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Service;
import com.externalrepoproject.cascadedb.ServiceRef;

/**
 * Service object for domain model class {@link ServiceRef}.
 */
public interface ServiceRefService {

    /**
     * Creates a new ServiceRef. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServiceRef if any.
     *
     * @param serviceRef Details of the ServiceRef to be created; value cannot be null.
     * @return The newly created ServiceRef.
     */
    ServiceRef create(@Valid ServiceRef serviceRef);


	/**
     * Returns ServiceRef by given id if exists.
     *
     * @param servicerefId The id of the ServiceRef to get; value cannot be null.
     * @return ServiceRef associated with the given servicerefId.
	 * @throws EntityNotFoundException If no ServiceRef is found.
     */
    ServiceRef getById(String servicerefId);

    /**
     * Find and return the ServiceRef by given id if exists, returns null otherwise.
     *
     * @param servicerefId The id of the ServiceRef to get; value cannot be null.
     * @return ServiceRef associated with the given servicerefId.
     */
    ServiceRef findById(String servicerefId);

	/**
     * Find and return the list of ServiceRefs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param servicerefIds The id's of the ServiceRef to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ServiceRefs associated with the given servicerefIds.
     */
    List<ServiceRef> findByMultipleIds(List<String> servicerefIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ServiceRef. It replaces all fields of the existing ServiceRef with the given serviceRef.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ServiceRef if any.
     *
     * @param serviceRef The details of the ServiceRef to be updated; value cannot be null.
     * @return The updated ServiceRef.
     * @throws EntityNotFoundException if no ServiceRef is found with given input.
     */
    ServiceRef update(@Valid ServiceRef serviceRef);

    /**
     * Deletes an existing ServiceRef with the given id.
     *
     * @param servicerefId The id of the ServiceRef to be deleted; value cannot be null.
     * @return The deleted ServiceRef.
     * @throws EntityNotFoundException if no ServiceRef found with the given id.
     */
    ServiceRef delete(String servicerefId);

    /**
     * Deletes an existing ServiceRef with the given object.
     *
     * @param serviceRef The instance of the ServiceRef to be deleted; value cannot be null.
     */
    void delete(ServiceRef serviceRef);

    /**
     * Find all ServiceRefs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServiceRefs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ServiceRef> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ServiceRefs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ServiceRefs.
     *
     * @see Pageable
     * @see Page
     */
    Page<ServiceRef> findAll(String query, Pageable pageable);

    /**
     * Exports all ServiceRefs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ServiceRefs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ServiceRefs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ServiceRef.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated services for given ServiceRef id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Service instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Service> findAssociatedServices(String id, Pageable pageable);

}