/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneCompUniqueC;

/**
 * Service object for domain model class {@link One2oneCompUniqueC}.
 */
public interface One2oneCompUniqueCService {

    /**
     * Creates a new One2oneCompUniqueC. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneCompUniqueC if any.
     *
     * @param one2oneCompUniqueC Details of the One2oneCompUniqueC to be created; value cannot be null.
     * @return The newly created One2oneCompUniqueC.
     */
    One2oneCompUniqueC create(@Valid One2oneCompUniqueC one2oneCompUniqueC);


	/**
     * Returns One2oneCompUniqueC by given id if exists.
     *
     * @param one2onecompuniquecId The id of the One2oneCompUniqueC to get; value cannot be null.
     * @return One2oneCompUniqueC associated with the given one2onecompuniquecId.
	 * @throws EntityNotFoundException If no One2oneCompUniqueC is found.
     */
    One2oneCompUniqueC getById(Integer one2onecompuniquecId);

    /**
     * Find and return the One2oneCompUniqueC by given id if exists, returns null otherwise.
     *
     * @param one2onecompuniquecId The id of the One2oneCompUniqueC to get; value cannot be null.
     * @return One2oneCompUniqueC associated with the given one2onecompuniquecId.
     */
    One2oneCompUniqueC findById(Integer one2onecompuniquecId);

	/**
     * Find and return the list of One2oneCompUniqueCs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param one2onecompuniquecIds The id's of the One2oneCompUniqueC to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return One2oneCompUniqueCs associated with the given one2onecompuniquecIds.
     */
    List<One2oneCompUniqueC> findByMultipleIds(List<Integer> one2onecompuniquecIds, boolean orderedReturn);

    /**
     * Find and return the One2oneCompUniqueC for given childIntId  andchildStringId  if exists.
     *
     * @param childIntId value of childIntId; value cannot be null.
     * @param childStringId value of childStringId; value cannot be null.
     * @return One2oneCompUniqueC associated with the given inputs.
     * @throws EntityNotFoundException if no matching One2oneCompUniqueC found.
     */
    One2oneCompUniqueC getByChildIntIdAndChildStringId(Integer childIntId, String childStringId);

    /**
     * Updates the details of an existing One2oneCompUniqueC. It replaces all fields of the existing One2oneCompUniqueC with the given one2oneCompUniqueC.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneCompUniqueC if any.
     *
     * @param one2oneCompUniqueC The details of the One2oneCompUniqueC to be updated; value cannot be null.
     * @return The updated One2oneCompUniqueC.
     * @throws EntityNotFoundException if no One2oneCompUniqueC is found with given input.
     */
    One2oneCompUniqueC update(@Valid One2oneCompUniqueC one2oneCompUniqueC);

    /**
     * Deletes an existing One2oneCompUniqueC with the given id.
     *
     * @param one2onecompuniquecId The id of the One2oneCompUniqueC to be deleted; value cannot be null.
     * @return The deleted One2oneCompUniqueC.
     * @throws EntityNotFoundException if no One2oneCompUniqueC found with the given id.
     */
    One2oneCompUniqueC delete(Integer one2onecompuniquecId);

    /**
     * Deletes an existing One2oneCompUniqueC with the given object.
     *
     * @param one2oneCompUniqueC The instance of the One2oneCompUniqueC to be deleted; value cannot be null.
     */
    void delete(One2oneCompUniqueC one2oneCompUniqueC);

    /**
     * Find all One2oneCompUniqueCs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCompUniqueCs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<One2oneCompUniqueC> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all One2oneCompUniqueCs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCompUniqueCs.
     *
     * @see Pageable
     * @see Page
     */
    Page<One2oneCompUniqueC> findAll(String query, Pageable pageable);

    /**
     * Exports all One2oneCompUniqueCs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all One2oneCompUniqueCs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the One2oneCompUniqueCs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the One2oneCompUniqueC.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}