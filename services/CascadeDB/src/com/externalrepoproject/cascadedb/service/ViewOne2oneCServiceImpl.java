/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.ViewOne2oneC;
import com.externalrepoproject.cascadedb.ViewOne2oneCId;


/**
 * ServiceImpl object for domain model class ViewOne2oneC.
 *
 * @see ViewOne2oneC
 */
@Service("CascadeDB.ViewOne2oneCService")
@Validated
public class ViewOne2oneCServiceImpl implements ViewOne2oneCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewOne2oneCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.ViewOne2oneCDao")
    private WMGenericDao<ViewOne2oneC, ViewOne2oneCId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewOne2oneC, ViewOne2oneCId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public ViewOne2oneC create(ViewOne2oneC viewOne2oneC) {
        LOGGER.debug("Creating a new ViewOne2oneC with information: {}", viewOne2oneC);

        ViewOne2oneC viewOne2oneCCreated = this.wmGenericDao.create(viewOne2oneC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(viewOne2oneCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public ViewOne2oneC getById(ViewOne2oneCId viewone2onecId) {
        LOGGER.debug("Finding ViewOne2oneC by id: {}", viewone2onecId);
        return this.wmGenericDao.findById(viewone2onecId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public ViewOne2oneC findById(ViewOne2oneCId viewone2onecId) {
        LOGGER.debug("Finding ViewOne2oneC by id: {}", viewone2onecId);
        try {
            return this.wmGenericDao.findById(viewone2onecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ViewOne2oneC found with id: {}", viewone2onecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<ViewOne2oneC> findByMultipleIds(List<ViewOne2oneCId> viewone2onecIds, boolean orderedReturn) {
        LOGGER.debug("Finding ViewOne2oneCs by ids: {}", viewone2onecIds);

        return this.wmGenericDao.findByMultipleIds(viewone2onecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public ViewOne2oneC update(ViewOne2oneC viewOne2oneC) {
        LOGGER.debug("Updating ViewOne2oneC with information: {}", viewOne2oneC);

        this.wmGenericDao.update(viewOne2oneC);
        this.wmGenericDao.refresh(viewOne2oneC);

        return viewOne2oneC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public ViewOne2oneC delete(ViewOne2oneCId viewone2onecId) {
        LOGGER.debug("Deleting ViewOne2oneC with id: {}", viewone2onecId);
        ViewOne2oneC deleted = this.wmGenericDao.findById(viewone2onecId);
        if (deleted == null) {
            LOGGER.debug("No ViewOne2oneC found with id: {}", viewone2onecId);
            throw new EntityNotFoundException(String.valueOf(viewone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(ViewOne2oneC viewOne2oneC) {
        LOGGER.debug("Deleting ViewOne2oneC with {}", viewOne2oneC);
        this.wmGenericDao.delete(viewOne2oneC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<ViewOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewOne2oneCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<ViewOne2oneC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewOne2oneCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table ViewOne2oneC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table ViewOne2oneC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}