/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.ServiceRef;


/**
 * ServiceImpl object for domain model class ServiceRef.
 *
 * @see ServiceRef
 */
@Service("CascadeDB.ServiceRefService")
@Validated
public class ServiceRefServiceImpl implements ServiceRefService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceRefServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("CascadeDB.ServiceService")
    private ServiceService serviceService;

    @Autowired
    @Qualifier("CascadeDB.ServiceRefDao")
    private WMGenericDao<ServiceRef, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServiceRef, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public ServiceRef create(ServiceRef serviceRef) {
        LOGGER.debug("Creating a new ServiceRef with information: {}", serviceRef);

        ServiceRef serviceRefCreated = this.wmGenericDao.create(serviceRef);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(serviceRefCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public ServiceRef getById(String servicerefId) {
        LOGGER.debug("Finding ServiceRef by id: {}", servicerefId);
        return this.wmGenericDao.findById(servicerefId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public ServiceRef findById(String servicerefId) {
        LOGGER.debug("Finding ServiceRef by id: {}", servicerefId);
        try {
            return this.wmGenericDao.findById(servicerefId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ServiceRef found with id: {}", servicerefId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<ServiceRef> findByMultipleIds(List<String> servicerefIds, boolean orderedReturn) {
        LOGGER.debug("Finding ServiceRefs by ids: {}", servicerefIds);

        return this.wmGenericDao.findByMultipleIds(servicerefIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public ServiceRef update(ServiceRef serviceRef) {
        LOGGER.debug("Updating ServiceRef with information: {}", serviceRef);

        this.wmGenericDao.update(serviceRef);
        this.wmGenericDao.refresh(serviceRef);

        return serviceRef;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public ServiceRef delete(String servicerefId) {
        LOGGER.debug("Deleting ServiceRef with id: {}", servicerefId);
        ServiceRef deleted = this.wmGenericDao.findById(servicerefId);
        if (deleted == null) {
            LOGGER.debug("No ServiceRef found with id: {}", servicerefId);
            throw new EntityNotFoundException(String.valueOf(servicerefId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(ServiceRef serviceRef) {
        LOGGER.debug("Deleting ServiceRef with {}", serviceRef);
        this.wmGenericDao.delete(serviceRef);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<ServiceRef> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ServiceRefs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<ServiceRef> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ServiceRefs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table ServiceRef to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table ServiceRef to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<com.externalrepoproject.cascadedb.Service> findAssociatedServices(String id, Pageable pageable) {
        LOGGER.debug("Fetching all associated services");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("serviceRef.id = '" + id + "'");

        return serviceService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ServiceService instance
     */
    protected void setServiceService(ServiceService service) {
        this.serviceService = service;
    }

}