/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Many2oneCompositeC;
import com.externalrepoproject.cascadedb.One2manyCompositeP;
import com.externalrepoproject.cascadedb.One2manyCompositePId;


/**
 * ServiceImpl object for domain model class One2manyCompositeP.
 *
 * @see One2manyCompositeP
 */
@Service("CascadeDB.One2manyCompositePService")
@Validated
public class One2manyCompositePServiceImpl implements One2manyCompositePService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2manyCompositePServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("CascadeDB.Many2oneCompositeCService")
    private Many2oneCompositeCService many2oneCompositeCService;

    @Autowired
    @Qualifier("CascadeDB.One2manyCompositePDao")
    private WMGenericDao<One2manyCompositeP, One2manyCompositePId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2manyCompositeP, One2manyCompositePId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP create(One2manyCompositeP one2manyCompositeP) {
        LOGGER.debug("Creating a new One2manyCompositeP with information: {}", one2manyCompositeP);

        One2manyCompositeP one2manyCompositePCreated = this.wmGenericDao.create(one2manyCompositeP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2manyCompositePCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP getById(One2manyCompositePId one2manycompositepId) {
        LOGGER.debug("Finding One2manyCompositeP by id: {}", one2manycompositepId);
        return this.wmGenericDao.findById(one2manycompositepId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP findById(One2manyCompositePId one2manycompositepId) {
        LOGGER.debug("Finding One2manyCompositeP by id: {}", one2manycompositepId);
        try {
            return this.wmGenericDao.findById(one2manycompositepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2manyCompositeP found with id: {}", one2manycompositepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2manyCompositeP> findByMultipleIds(List<One2manyCompositePId> one2manycompositepIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2manyCompositePs by ids: {}", one2manycompositepIds);

        return this.wmGenericDao.findByMultipleIds(one2manycompositepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP update(One2manyCompositeP one2manyCompositeP) {
        LOGGER.debug("Updating One2manyCompositeP with information: {}", one2manyCompositeP);

        this.wmGenericDao.update(one2manyCompositeP);
        this.wmGenericDao.refresh(one2manyCompositeP);

        return one2manyCompositeP;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP delete(One2manyCompositePId one2manycompositepId) {
        LOGGER.debug("Deleting One2manyCompositeP with id: {}", one2manycompositepId);
        One2manyCompositeP deleted = this.wmGenericDao.findById(one2manycompositepId);
        if (deleted == null) {
            LOGGER.debug("No One2manyCompositeP found with id: {}", one2manycompositepId);
            throw new EntityNotFoundException(String.valueOf(one2manycompositepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2manyCompositeP one2manyCompositeP) {
        LOGGER.debug("Deleting One2manyCompositeP with {}", one2manyCompositeP);
        this.wmGenericDao.delete(one2manyCompositeP);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2manyCompositeP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2manyCompositePs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2manyCompositeP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2manyCompositePs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2manyCompositeP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2manyCompositeP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Many2oneCompositeC> findAssociatedMany2oneCompositeCs(String parentStringId, Integer parentIntId, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneCompositeCs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("one2manyCompositeP.parentStringId = '" + parentStringId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("one2manyCompositeP.parentIntId = '" + parentIntId + "'");

        return many2oneCompositeCService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Many2oneCompositeCService instance
     */
    protected void setMany2oneCompositeCService(Many2oneCompositeCService service) {
        this.many2oneCompositeCService = service;
    }

}