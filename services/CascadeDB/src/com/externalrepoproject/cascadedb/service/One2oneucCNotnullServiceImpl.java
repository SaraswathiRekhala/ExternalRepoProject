/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneucCNotnull;


/**
 * ServiceImpl object for domain model class One2oneucCNotnull.
 *
 * @see One2oneucCNotnull
 */
@Service("CascadeDB.One2oneucCNotnullService")
@Validated
public class One2oneucCNotnullServiceImpl implements One2oneucCNotnullService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneucCNotnullServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2oneucCNotnullDao")
    private WMGenericDao<One2oneucCNotnull, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneucCNotnull, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull create(One2oneucCNotnull one2oneucCnotnull) {
        LOGGER.debug("Creating a new One2oneucCNotnull with information: {}", one2oneucCnotnull);

        One2oneucCNotnull one2oneucCnotnullCreated = this.wmGenericDao.create(one2oneucCnotnull);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneucCnotnullCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull getById(Integer one2oneuccnotnullId) {
        LOGGER.debug("Finding One2oneucCNotnull by id: {}", one2oneuccnotnullId);
        return this.wmGenericDao.findById(one2oneuccnotnullId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull findById(Integer one2oneuccnotnullId) {
        LOGGER.debug("Finding One2oneucCNotnull by id: {}", one2oneuccnotnullId);
        try {
            return this.wmGenericDao.findById(one2oneuccnotnullId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneucCNotnull found with id: {}", one2oneuccnotnullId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2oneucCNotnull> findByMultipleIds(List<Integer> one2oneuccnotnullIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneucCNotnulls by ids: {}", one2oneuccnotnullIds);

        return this.wmGenericDao.findByMultipleIds(one2oneuccnotnullIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull getByChildColumn1(int childColumn1) {
        Map<String, Object> childColumn1Map = new HashMap<>();
        childColumn1Map.put("childColumn1", childColumn1);

        LOGGER.debug("Finding One2oneucCNotnull by unique keys: {}", childColumn1Map);
        return this.wmGenericDao.findByUniqueKey(childColumn1Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull update(One2oneucCNotnull one2oneucCnotnull) {
        LOGGER.debug("Updating One2oneucCNotnull with information: {}", one2oneucCnotnull);

        this.wmGenericDao.update(one2oneucCnotnull);
        this.wmGenericDao.refresh(one2oneucCnotnull);

        return one2oneucCnotnull;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneucCNotnull delete(Integer one2oneuccnotnullId) {
        LOGGER.debug("Deleting One2oneucCNotnull with id: {}", one2oneuccnotnullId);
        One2oneucCNotnull deleted = this.wmGenericDao.findById(one2oneuccnotnullId);
        if (deleted == null) {
            LOGGER.debug("No One2oneucCNotnull found with id: {}", one2oneuccnotnullId);
            throw new EntityNotFoundException(String.valueOf(one2oneuccnotnullId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2oneucCNotnull one2oneucCnotnull) {
        LOGGER.debug("Deleting One2oneucCNotnull with {}", one2oneucCnotnull);
        this.wmGenericDao.delete(one2oneucCnotnull);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneucCNotnull> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneucCNotnulls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneucCNotnull> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneucCNotnulls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneucCNotnull to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneucCNotnull to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}