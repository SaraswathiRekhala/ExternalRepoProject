/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneCompositeC;
import com.externalrepoproject.cascadedb.One2oneCompositePId;


/**
 * ServiceImpl object for domain model class One2oneCompositeC.
 *
 * @see One2oneCompositeC
 */
@Service("CascadeDB.One2oneCompositeCService")
@Validated
public class One2oneCompositeCServiceImpl implements One2oneCompositeCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompositeCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2oneCompositeCDao")
    private WMGenericDao<One2oneCompositeC, One2oneCompositePId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneCompositeC, One2oneCompositePId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeC create(One2oneCompositeC one2oneCompositeC) {
        LOGGER.debug("Creating a new One2oneCompositeC with information: {}", one2oneCompositeC);

        One2oneCompositeC one2oneCompositeCCreated = this.wmGenericDao.create(one2oneCompositeC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneCompositeCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeC getById(One2oneCompositePId one2onecompositecId) {
        LOGGER.debug("Finding One2oneCompositeC by id: {}", one2onecompositecId);
        return this.wmGenericDao.findById(one2onecompositecId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeC findById(One2oneCompositePId one2onecompositecId) {
        LOGGER.debug("Finding One2oneCompositeC by id: {}", one2onecompositecId);
        try {
            return this.wmGenericDao.findById(one2onecompositecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneCompositeC found with id: {}", one2onecompositecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2oneCompositeC> findByMultipleIds(List<One2oneCompositePId> one2onecompositecIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneCompositeCs by ids: {}", one2onecompositecIds);

        return this.wmGenericDao.findByMultipleIds(one2onecompositecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeC update(One2oneCompositeC one2oneCompositeC) {
        LOGGER.debug("Updating One2oneCompositeC with information: {}", one2oneCompositeC);

        this.wmGenericDao.update(one2oneCompositeC);
        this.wmGenericDao.refresh(one2oneCompositeC);

        return one2oneCompositeC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeC delete(One2oneCompositePId one2onecompositecId) {
        LOGGER.debug("Deleting One2oneCompositeC with id: {}", one2onecompositecId);
        One2oneCompositeC deleted = this.wmGenericDao.findById(one2onecompositecId);
        if (deleted == null) {
            LOGGER.debug("No One2oneCompositeC found with id: {}", one2onecompositecId);
            throw new EntityNotFoundException(String.valueOf(one2onecompositecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2oneCompositeC one2oneCompositeC) {
        LOGGER.debug("Deleting One2oneCompositeC with {}", one2oneCompositeC);
        this.wmGenericDao.delete(one2oneCompositeC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompositeC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompositeCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompositeC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompositeCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompositeC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompositeC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}