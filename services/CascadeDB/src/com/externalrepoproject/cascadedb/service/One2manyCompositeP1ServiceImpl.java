/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Many2oneCompositeC1;
import com.externalrepoproject.cascadedb.One2manyCompositeP1;
import com.externalrepoproject.cascadedb.One2manyCompositeP1Id;


/**
 * ServiceImpl object for domain model class One2manyCompositeP1.
 *
 * @see One2manyCompositeP1
 */
@Service("CascadeDB.One2manyCompositeP1Service")
@Validated
public class One2manyCompositeP1ServiceImpl implements One2manyCompositeP1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2manyCompositeP1ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("CascadeDB.Many2oneCompositeC1Service")
    private Many2oneCompositeC1Service many2oneCompositeC1Service;

    @Autowired
    @Qualifier("CascadeDB.One2manyCompositeP1Dao")
    private WMGenericDao<One2manyCompositeP1, One2manyCompositeP1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2manyCompositeP1, One2manyCompositeP1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP1 create(One2manyCompositeP1 one2manyCompositeP1) {
        LOGGER.debug("Creating a new One2manyCompositeP1 with information: {}", one2manyCompositeP1);

        One2manyCompositeP1 one2manyCompositeP1Created = this.wmGenericDao.create(one2manyCompositeP1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2manyCompositeP1Created);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP1 getById(One2manyCompositeP1Id one2manycompositep1Id) {
        LOGGER.debug("Finding One2manyCompositeP1 by id: {}", one2manycompositep1Id);
        return this.wmGenericDao.findById(one2manycompositep1Id);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP1 findById(One2manyCompositeP1Id one2manycompositep1Id) {
        LOGGER.debug("Finding One2manyCompositeP1 by id: {}", one2manycompositep1Id);
        try {
            return this.wmGenericDao.findById(one2manycompositep1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2manyCompositeP1 found with id: {}", one2manycompositep1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2manyCompositeP1> findByMultipleIds(List<One2manyCompositeP1Id> one2manycompositep1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding One2manyCompositeP1s by ids: {}", one2manycompositep1Ids);

        return this.wmGenericDao.findByMultipleIds(one2manycompositep1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP1 update(One2manyCompositeP1 one2manyCompositeP1) {
        LOGGER.debug("Updating One2manyCompositeP1 with information: {}", one2manyCompositeP1);

        this.wmGenericDao.update(one2manyCompositeP1);
        this.wmGenericDao.refresh(one2manyCompositeP1);

        return one2manyCompositeP1;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2manyCompositeP1 delete(One2manyCompositeP1Id one2manycompositep1Id) {
        LOGGER.debug("Deleting One2manyCompositeP1 with id: {}", one2manycompositep1Id);
        One2manyCompositeP1 deleted = this.wmGenericDao.findById(one2manycompositep1Id);
        if (deleted == null) {
            LOGGER.debug("No One2manyCompositeP1 found with id: {}", one2manycompositep1Id);
            throw new EntityNotFoundException(String.valueOf(one2manycompositep1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2manyCompositeP1 one2manyCompositeP1) {
        LOGGER.debug("Deleting One2manyCompositeP1 with {}", one2manyCompositeP1);
        this.wmGenericDao.delete(one2manyCompositeP1);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2manyCompositeP1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2manyCompositeP1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2manyCompositeP1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2manyCompositeP1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2manyCompositeP1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2manyCompositeP1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Many2oneCompositeC1> findAssociatedMany2oneCompositeC1s(String parentStringId, Integer parentIntId, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneCompositeC1s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("one2manyCompositeP1.parentStringId = '" + parentStringId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("one2manyCompositeP1.parentIntId = '" + parentIntId + "'");

        return many2oneCompositeC1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Many2oneCompositeC1Service instance
     */
    protected void setMany2oneCompositeC1Service(Many2oneCompositeC1Service service) {
        this.many2oneCompositeC1Service = service;
    }

}