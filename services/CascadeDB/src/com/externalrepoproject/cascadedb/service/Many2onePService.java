/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Many2oneC1;
import com.externalrepoproject.cascadedb.Many2oneP;

/**
 * Service object for domain model class {@link Many2oneP}.
 */
public interface Many2onePService {

    /**
     * Creates a new Many2oneP. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneP if any.
     *
     * @param many2oneP Details of the Many2oneP to be created; value cannot be null.
     * @return The newly created Many2oneP.
     */
    Many2oneP create(@Valid Many2oneP many2oneP);


	/**
     * Returns Many2oneP by given id if exists.
     *
     * @param many2onepId The id of the Many2oneP to get; value cannot be null.
     * @return Many2oneP associated with the given many2onepId.
	 * @throws EntityNotFoundException If no Many2oneP is found.
     */
    Many2oneP getById(Integer many2onepId);

    /**
     * Find and return the Many2oneP by given id if exists, returns null otherwise.
     *
     * @param many2onepId The id of the Many2oneP to get; value cannot be null.
     * @return Many2oneP associated with the given many2onepId.
     */
    Many2oneP findById(Integer many2onepId);

	/**
     * Find and return the list of Many2onePs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param many2onepIds The id's of the Many2oneP to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Many2onePs associated with the given many2onepIds.
     */
    List<Many2oneP> findByMultipleIds(List<Integer> many2onepIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Many2oneP. It replaces all fields of the existing Many2oneP with the given many2oneP.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneP if any.
     *
     * @param many2oneP The details of the Many2oneP to be updated; value cannot be null.
     * @return The updated Many2oneP.
     * @throws EntityNotFoundException if no Many2oneP is found with given input.
     */
    Many2oneP update(@Valid Many2oneP many2oneP);

    /**
     * Deletes an existing Many2oneP with the given id.
     *
     * @param many2onepId The id of the Many2oneP to be deleted; value cannot be null.
     * @return The deleted Many2oneP.
     * @throws EntityNotFoundException if no Many2oneP found with the given id.
     */
    Many2oneP delete(Integer many2onepId);

    /**
     * Deletes an existing Many2oneP with the given object.
     *
     * @param many2oneP The instance of the Many2oneP to be deleted; value cannot be null.
     */
    void delete(Many2oneP many2oneP);

    /**
     * Find all Many2onePs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2onePs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Many2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Many2onePs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2onePs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneP> findAll(String query, Pageable pageable);

    /**
     * Exports all Many2onePs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Many2onePs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Many2onePs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Many2oneP.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated many2oneC1s for given Many2oneP id.
     *
     * @param parentId value of parentId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Many2oneC1 instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneC1> findAssociatedMany2oneC1s(Integer parentId, Pageable pageable);

}