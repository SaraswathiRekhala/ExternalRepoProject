/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.CompositeTable;
import com.externalrepoproject.cascadedb.CompositeTableId;


/**
 * ServiceImpl object for domain model class CompositeTable.
 *
 * @see CompositeTable
 */
@Service("CascadeDB.CompositeTableService")
@Validated
public class CompositeTableServiceImpl implements CompositeTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeTableServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.CompositeTableDao")
    private WMGenericDao<CompositeTable, CompositeTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeTable, CompositeTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public CompositeTable create(CompositeTable compositeTable) {
        LOGGER.debug("Creating a new CompositeTable with information: {}", compositeTable);

        CompositeTable compositeTableCreated = this.wmGenericDao.create(compositeTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeTableCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public CompositeTable getById(CompositeTableId compositetableId) {
        LOGGER.debug("Finding CompositeTable by id: {}", compositetableId);
        return this.wmGenericDao.findById(compositetableId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public CompositeTable findById(CompositeTableId compositetableId) {
        LOGGER.debug("Finding CompositeTable by id: {}", compositetableId);
        try {
            return this.wmGenericDao.findById(compositetableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeTable found with id: {}", compositetableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<CompositeTable> findByMultipleIds(List<CompositeTableId> compositetableIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeTables by ids: {}", compositetableIds);

        return this.wmGenericDao.findByMultipleIds(compositetableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public CompositeTable update(CompositeTable compositeTable) {
        LOGGER.debug("Updating CompositeTable with information: {}", compositeTable);

        this.wmGenericDao.update(compositeTable);
        this.wmGenericDao.refresh(compositeTable);

        return compositeTable;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public CompositeTable delete(CompositeTableId compositetableId) {
        LOGGER.debug("Deleting CompositeTable with id: {}", compositetableId);
        CompositeTable deleted = this.wmGenericDao.findById(compositetableId);
        if (deleted == null) {
            LOGGER.debug("No CompositeTable found with id: {}", compositetableId);
            throw new EntityNotFoundException(String.valueOf(compositetableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(CompositeTable compositeTable) {
        LOGGER.debug("Deleting CompositeTable with {}", compositeTable);
        this.wmGenericDao.delete(compositeTable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<CompositeTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<CompositeTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table CompositeTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table CompositeTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}