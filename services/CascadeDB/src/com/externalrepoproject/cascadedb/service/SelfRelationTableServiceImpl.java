/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.SelfRelationTable;


/**
 * ServiceImpl object for domain model class SelfRelationTable.
 *
 * @see SelfRelationTable
 */
@Service("CascadeDB.SelfRelationTableService")
@Validated
public class SelfRelationTableServiceImpl implements SelfRelationTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SelfRelationTableServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.SelfRelationTableDao")
    private WMGenericDao<SelfRelationTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SelfRelationTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public SelfRelationTable create(SelfRelationTable selfRelationTable) {
        LOGGER.debug("Creating a new SelfRelationTable with information: {}", selfRelationTable);

        SelfRelationTable selfRelationTableCreated = this.wmGenericDao.create(selfRelationTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(selfRelationTableCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public SelfRelationTable getById(Integer selfrelationtableId) {
        LOGGER.debug("Finding SelfRelationTable by id: {}", selfrelationtableId);
        return this.wmGenericDao.findById(selfrelationtableId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public SelfRelationTable findById(Integer selfrelationtableId) {
        LOGGER.debug("Finding SelfRelationTable by id: {}", selfrelationtableId);
        try {
            return this.wmGenericDao.findById(selfrelationtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SelfRelationTable found with id: {}", selfrelationtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<SelfRelationTable> findByMultipleIds(List<Integer> selfrelationtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding SelfRelationTables by ids: {}", selfrelationtableIds);

        return this.wmGenericDao.findByMultipleIds(selfrelationtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public SelfRelationTable update(SelfRelationTable selfRelationTable) {
        LOGGER.debug("Updating SelfRelationTable with information: {}", selfRelationTable);

        this.wmGenericDao.update(selfRelationTable);
        this.wmGenericDao.refresh(selfRelationTable);

        return selfRelationTable;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public SelfRelationTable delete(Integer selfrelationtableId) {
        LOGGER.debug("Deleting SelfRelationTable with id: {}", selfrelationtableId);
        SelfRelationTable deleted = this.wmGenericDao.findById(selfrelationtableId);
        if (deleted == null) {
            LOGGER.debug("No SelfRelationTable found with id: {}", selfrelationtableId);
            throw new EntityNotFoundException(String.valueOf(selfrelationtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(SelfRelationTable selfRelationTable) {
        LOGGER.debug("Deleting SelfRelationTable with {}", selfRelationTable);
        this.wmGenericDao.delete(selfRelationTable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<SelfRelationTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SelfRelationTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<SelfRelationTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SelfRelationTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table SelfRelationTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table SelfRelationTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<SelfRelationTable> findAssociatedSelfRelationTablesForSrRefid(Integer pkId, Pageable pageable) {
        LOGGER.debug("Fetching all associated selfRelationTablesForSrRefid");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("selfRelationTableBySrRefid.pkId = '" + pkId + "'");

        return findAll(queryBuilder.toString(), pageable);
    }


}