/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2onePMultipleC;


/**
 * ServiceImpl object for domain model class One2onePMultipleC.
 *
 * @see One2onePMultipleC
 */
@Service("CascadeDB.One2onePMultipleCService")
@Validated
public class One2onePMultipleCServiceImpl implements One2onePMultipleCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2onePMultipleCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2onePMultipleCDao")
    private WMGenericDao<One2onePMultipleC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2onePMultipleC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2onePMultipleC create(One2onePMultipleC one2onePmultipleC) {
        LOGGER.debug("Creating a new One2onePMultipleC with information: {}", one2onePmultipleC);

        One2onePMultipleC one2onePmultipleCCreated = this.wmGenericDao.create(one2onePmultipleC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2onePmultipleCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2onePMultipleC getById(Integer one2onepmultiplecId) {
        LOGGER.debug("Finding One2onePMultipleC by id: {}", one2onepmultiplecId);
        return this.wmGenericDao.findById(one2onepmultiplecId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2onePMultipleC findById(Integer one2onepmultiplecId) {
        LOGGER.debug("Finding One2onePMultipleC by id: {}", one2onepmultiplecId);
        try {
            return this.wmGenericDao.findById(one2onepmultiplecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2onePMultipleC found with id: {}", one2onepmultiplecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2onePMultipleC> findByMultipleIds(List<Integer> one2onepmultiplecIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2onePMultipleCs by ids: {}", one2onepmultiplecIds);

        return this.wmGenericDao.findByMultipleIds(one2onepmultiplecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2onePMultipleC update(One2onePMultipleC one2onePmultipleC) {
        LOGGER.debug("Updating One2onePMultipleC with information: {}", one2onePmultipleC);

        this.wmGenericDao.update(one2onePmultipleC);
        this.wmGenericDao.refresh(one2onePmultipleC);

        return one2onePmultipleC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2onePMultipleC delete(Integer one2onepmultiplecId) {
        LOGGER.debug("Deleting One2onePMultipleC with id: {}", one2onepmultiplecId);
        One2onePMultipleC deleted = this.wmGenericDao.findById(one2onepmultiplecId);
        if (deleted == null) {
            LOGGER.debug("No One2onePMultipleC found with id: {}", one2onepmultiplecId);
            throw new EntityNotFoundException(String.valueOf(one2onepmultiplecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2onePMultipleC one2onePmultipleC) {
        LOGGER.debug("Deleting One2onePMultipleC with {}", one2onePmultipleC);
        this.wmGenericDao.delete(one2onePmultipleC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2onePMultipleC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2onePMultipleCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2onePMultipleC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2onePMultipleCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2onePMultipleC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2onePMultipleC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}