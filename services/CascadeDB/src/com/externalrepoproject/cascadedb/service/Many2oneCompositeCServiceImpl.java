/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.Many2oneCompositeC;


/**
 * ServiceImpl object for domain model class Many2oneCompositeC.
 *
 * @see Many2oneCompositeC
 */
@Service("CascadeDB.Many2oneCompositeCService")
@Validated
public class Many2oneCompositeCServiceImpl implements Many2oneCompositeCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompositeCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.Many2oneCompositeCDao")
    private WMGenericDao<Many2oneCompositeC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Many2oneCompositeC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public Many2oneCompositeC create(Many2oneCompositeC many2oneCompositeC) {
        LOGGER.debug("Creating a new Many2oneCompositeC with information: {}", many2oneCompositeC);

        Many2oneCompositeC many2oneCompositeCCreated = this.wmGenericDao.create(many2oneCompositeC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(many2oneCompositeCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Many2oneCompositeC getById(Integer many2onecompositecId) {
        LOGGER.debug("Finding Many2oneCompositeC by id: {}", many2onecompositecId);
        return this.wmGenericDao.findById(many2onecompositecId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Many2oneCompositeC findById(Integer many2onecompositecId) {
        LOGGER.debug("Finding Many2oneCompositeC by id: {}", many2onecompositecId);
        try {
            return this.wmGenericDao.findById(many2onecompositecId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Many2oneCompositeC found with id: {}", many2onecompositecId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<Many2oneCompositeC> findByMultipleIds(List<Integer> many2onecompositecIds, boolean orderedReturn) {
        LOGGER.debug("Finding Many2oneCompositeCs by ids: {}", many2onecompositecIds);

        return this.wmGenericDao.findByMultipleIds(many2onecompositecIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public Many2oneCompositeC update(Many2oneCompositeC many2oneCompositeC) {
        LOGGER.debug("Updating Many2oneCompositeC with information: {}", many2oneCompositeC);

        this.wmGenericDao.update(many2oneCompositeC);
        this.wmGenericDao.refresh(many2oneCompositeC);

        return many2oneCompositeC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public Many2oneCompositeC delete(Integer many2onecompositecId) {
        LOGGER.debug("Deleting Many2oneCompositeC with id: {}", many2onecompositecId);
        Many2oneCompositeC deleted = this.wmGenericDao.findById(many2onecompositecId);
        if (deleted == null) {
            LOGGER.debug("No Many2oneCompositeC found with id: {}", many2onecompositecId);
            throw new EntityNotFoundException(String.valueOf(many2onecompositecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(Many2oneCompositeC many2oneCompositeC) {
        LOGGER.debug("Deleting Many2oneCompositeC with {}", many2oneCompositeC);
        this.wmGenericDao.delete(many2oneCompositeC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Many2oneCompositeC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompositeCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Many2oneCompositeC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompositeCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table Many2oneCompositeC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table Many2oneCompositeC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}