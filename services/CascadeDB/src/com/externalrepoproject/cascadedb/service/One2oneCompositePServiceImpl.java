/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneCompositeP;
import com.externalrepoproject.cascadedb.One2oneCompositePId;


/**
 * ServiceImpl object for domain model class One2oneCompositeP.
 *
 * @see One2oneCompositeP
 */
@Service("CascadeDB.One2oneCompositePService")
@Validated
public class One2oneCompositePServiceImpl implements One2oneCompositePService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompositePServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2oneCompositePDao")
    private WMGenericDao<One2oneCompositeP, One2oneCompositePId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneCompositeP, One2oneCompositePId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeP create(One2oneCompositeP one2oneCompositeP) {
        LOGGER.debug("Creating a new One2oneCompositeP with information: {}", one2oneCompositeP);

        One2oneCompositeP one2oneCompositePCreated = this.wmGenericDao.create(one2oneCompositeP);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneCompositePCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeP getById(One2oneCompositePId one2onecompositepId) {
        LOGGER.debug("Finding One2oneCompositeP by id: {}", one2onecompositepId);
        return this.wmGenericDao.findById(one2onecompositepId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeP findById(One2oneCompositePId one2onecompositepId) {
        LOGGER.debug("Finding One2oneCompositeP by id: {}", one2onecompositepId);
        try {
            return this.wmGenericDao.findById(one2onecompositepId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneCompositeP found with id: {}", one2onecompositepId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2oneCompositeP> findByMultipleIds(List<One2oneCompositePId> one2onecompositepIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneCompositePs by ids: {}", one2onecompositepIds);

        return this.wmGenericDao.findByMultipleIds(one2onecompositepIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeP update(One2oneCompositeP one2oneCompositeP) {
        LOGGER.debug("Updating One2oneCompositeP with information: {}", one2oneCompositeP);

        this.wmGenericDao.update(one2oneCompositeP);
        this.wmGenericDao.refresh(one2oneCompositeP);

        return one2oneCompositeP;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneCompositeP delete(One2oneCompositePId one2onecompositepId) {
        LOGGER.debug("Deleting One2oneCompositeP with id: {}", one2onecompositepId);
        One2oneCompositeP deleted = this.wmGenericDao.findById(one2onecompositepId);
        if (deleted == null) {
            LOGGER.debug("No One2oneCompositeP found with id: {}", one2onecompositepId);
            throw new EntityNotFoundException(String.valueOf(one2onecompositepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2oneCompositeP one2oneCompositeP) {
        LOGGER.debug("Deleting One2oneCompositeP with {}", one2oneCompositeP);
        this.wmGenericDao.delete(one2oneCompositeP);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompositeP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompositePs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneCompositeP> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompositePs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompositeP to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneCompositeP to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}