/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.externalrepoproject.cascadedb.One2oneUcC;


/**
 * ServiceImpl object for domain model class One2oneUcC.
 *
 * @see One2oneUcC
 */
@Service("CascadeDB.One2oneUcCService")
@Validated
public class One2oneUcCServiceImpl implements One2oneUcCService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneUcCServiceImpl.class);


    @Autowired
    @Qualifier("CascadeDB.One2oneUcCDao")
    private WMGenericDao<One2oneUcC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneUcC, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC create(One2oneUcC one2oneUcC) {
        LOGGER.debug("Creating a new One2oneUcC with information: {}", one2oneUcC);

        One2oneUcC one2oneUcCCreated = this.wmGenericDao.create(one2oneUcC);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(one2oneUcCCreated);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC getById(Integer one2oneuccId) {
        LOGGER.debug("Finding One2oneUcC by id: {}", one2oneuccId);
        return this.wmGenericDao.findById(one2oneuccId);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC findById(Integer one2oneuccId) {
        LOGGER.debug("Finding One2oneUcC by id: {}", one2oneuccId);
        try {
            return this.wmGenericDao.findById(one2oneuccId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No One2oneUcC found with id: {}", one2oneuccId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public List<One2oneUcC> findByMultipleIds(List<Integer> one2oneuccIds, boolean orderedReturn) {
        LOGGER.debug("Finding One2oneUcCs by ids: {}", one2oneuccIds);

        return this.wmGenericDao.findByMultipleIds(one2oneuccIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC getByChildColumn1(Integer childColumn1) {
        Map<String, Object> childColumn1Map = new HashMap<>();
        childColumn1Map.put("childColumn1", childColumn1);

        LOGGER.debug("Finding One2oneUcC by unique keys: {}", childColumn1Map);
        return this.wmGenericDao.findByUniqueKey(childColumn1Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC update(One2oneUcC one2oneUcC) {
        LOGGER.debug("Updating One2oneUcC with information: {}", one2oneUcC);

        this.wmGenericDao.update(one2oneUcC);
        this.wmGenericDao.refresh(one2oneUcC);

        return one2oneUcC;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public One2oneUcC delete(Integer one2oneuccId) {
        LOGGER.debug("Deleting One2oneUcC with id: {}", one2oneuccId);
        One2oneUcC deleted = this.wmGenericDao.findById(one2oneuccId);
        if (deleted == null) {
            LOGGER.debug("No One2oneUcC found with id: {}", one2oneuccId);
            throw new EntityNotFoundException(String.valueOf(one2oneuccId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "CascadeDBTransactionManager")
    @Override
    public void delete(One2oneUcC one2oneUcC) {
        LOGGER.debug("Deleting One2oneUcC with {}", one2oneUcC);
        this.wmGenericDao.delete(one2oneUcC);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneUcC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcCs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<One2oneUcC> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcCs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneUcC to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service CascadeDB for table One2oneUcC to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "CascadeDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}