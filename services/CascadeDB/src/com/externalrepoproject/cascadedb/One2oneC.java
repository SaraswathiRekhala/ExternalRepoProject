/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * One2oneC generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ONE2ONE_C`")
public class One2oneC implements Serializable {

    private Integer childId;
    private String childColumn1;
    private String childColumn2;
    private One2oneP one2oneP;

    @Id
    @Column(name = "`CHILD_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getChildId() {
        return this.childId;
    }

    public void setChildId(Integer childId) {
        this.childId = childId;
    }

    @Column(name = "`CHILD_COLUMN1`", nullable = true, length = 255)
    public String getChildColumn1() {
        return this.childColumn1;
    }

    public void setChildColumn1(String childColumn1) {
        this.childColumn1 = childColumn1;
    }

    @Column(name = "`CHILD_COLUMN2`", nullable = true, length = 255)
    public String getChildColumn2() {
        return this.childColumn2;
    }

    public void setChildColumn2(String childColumn2) {
        this.childColumn2 = childColumn2;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CHILD_ID`", referencedColumnName = "`PARENT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ONE2ONE_C_TO_ONE2ONE_qbaJw`"))
    @Fetch(FetchMode.JOIN)
    public One2oneP getOne2oneP() {
        return this.one2oneP;
    }

    public void setOne2oneP(One2oneP one2oneP) {
        if(one2oneP != null) {
            this.childId = one2oneP.getParentId();
        }

        this.one2oneP = one2oneP;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneC)) return false;
        final One2oneC one2oneC = (One2oneC) o;
        return Objects.equals(getChildId(), one2oneC.getChildId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getChildId());
    }
}