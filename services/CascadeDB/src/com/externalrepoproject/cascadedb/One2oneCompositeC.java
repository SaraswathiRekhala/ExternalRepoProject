/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * One2oneCompositeC generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ONE2ONE_COMPOSITE_C`")
@IdClass(One2oneCompositePId.class)
public class One2oneCompositeC implements Serializable {

    private Integer parentIntId;
    private String parentStringId;
    private String childColumn2;
    private String childColumn3;
    private One2oneCompositeP one2oneCompositeP;

    @Id
    @Column(name = "`CHILD_INT_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getParentIntId() {
        return this.parentIntId;
    }

    public void setParentIntId(Integer parentIntId) {
        this.parentIntId = parentIntId;
    }

    @Id
    @Column(name = "`CHILD_STRING_ID`", nullable = false, length = 255)
    public String getParentStringId() {
        return this.parentStringId;
    }

    public void setParentStringId(String parentStringId) {
        this.parentStringId = parentStringId;
    }

    @Column(name = "`CHILD_COLUMN2`", nullable = true, length = 255)
    public String getChildColumn2() {
        return this.childColumn2;
    }

    public void setChildColumn2(String childColumn2) {
        this.childColumn2 = childColumn2;
    }

    @Column(name = "`CHILD_COLUMN3`", nullable = true, length = 255)
    public String getChildColumn3() {
        return this.childColumn3;
    }

    public void setChildColumn3(String childColumn3) {
        this.childColumn3 = childColumn3;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`CHILD_INT_ID`", referencedColumnName = "`PARENT_INT_ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`CHILD_STRING_ID`", referencedColumnName = "`PARENT_STRING_ID`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_ONE2ONE_COMPOSITE_C_TlMr5P`"))
    @Fetch(FetchMode.JOIN)
    public One2oneCompositeP getOne2oneCompositeP() {
        return this.one2oneCompositeP;
    }

    public void setOne2oneCompositeP(One2oneCompositeP one2oneCompositeP) {
        if(one2oneCompositeP != null) {
            this.parentIntId = one2oneCompositeP.getParentIntId();
            this.parentStringId = one2oneCompositeP.getParentStringId();
        }

        this.one2oneCompositeP = one2oneCompositeP;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneCompositeC)) return false;
        final One2oneCompositeC one2oneCompositeC = (One2oneCompositeC) o;
        return Objects.equals(getParentIntId(), one2oneCompositeC.getParentIntId()) &&
                Objects.equals(getParentStringId(), one2oneCompositeC.getParentStringId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getParentIntId(),
                getParentStringId());
    }
}