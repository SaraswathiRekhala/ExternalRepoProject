/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.externalrepoproject.cascadedb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * One2oneC2 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ONE2ONE_C2`")
public class One2oneC2 implements Serializable {

    private Integer child2Id;
    private String child2Column1;
    private String child2Column2;
    private One2onePMultipleC one2onePmultipleC;

    @Id
    @Column(name = "`CHILD2_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getChild2Id() {
        return this.child2Id;
    }

    public void setChild2Id(Integer child2Id) {
        this.child2Id = child2Id;
    }

    @Column(name = "`CHILD2_COLUMN1`", nullable = true, length = 255)
    public String getChild2Column1() {
        return this.child2Column1;
    }

    public void setChild2Column1(String child2Column1) {
        this.child2Column1 = child2Column1;
    }

    @Column(name = "`CHILD2_COLUMN2`", nullable = true, length = 255)
    public String getChild2Column2() {
        return this.child2Column2;
    }

    public void setChild2Column2(String child2Column2) {
        this.child2Column2 = child2Column2;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CHILD2_ID`", referencedColumnName = "`PARENT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ONE2ONE_C2_TO_ONE2ONEXOXsh`"))
    @Fetch(FetchMode.JOIN)
    public One2onePMultipleC getOne2onePmultipleC() {
        return this.one2onePmultipleC;
    }

    public void setOne2onePmultipleC(One2onePMultipleC one2onePmultipleC) {
        if(one2onePmultipleC != null) {
            this.child2Id = one2onePmultipleC.getParentId();
        }

        this.one2onePmultipleC = one2onePmultipleC;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof One2oneC2)) return false;
        final One2oneC2 one2oneC2 = (One2oneC2) o;
        return Objects.equals(getChild2Id(), one2oneC2.getChild2Id());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getChild2Id());
    }
}